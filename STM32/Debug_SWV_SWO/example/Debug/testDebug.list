
testDebug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f74  08002f74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002f74  08002f74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f74  08002f74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002fec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002fec  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a7c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001375  00000000  00000000  00026b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004c0  00000000  00000000  00027e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000418  00000000  00000000  00028358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ca87  00000000  00000000  00028770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005333  00000000  00000000  000451f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a27c2  00000000  00000000  0004a52a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eccec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000189c  00000000  00000000  000ecd68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e6c 	.word	0x08002e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002e6c 	.word	0x08002e6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  for(int i = 0 ; i < len ; i++)
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	e009      	b.n	80002f4 <_write+0x26>
    ITM_SendChar((*ptr++));
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffc9 	bl	8000280 <ITM_SendChar>
  for(int i = 0 ; i < len ; i++)
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	3301      	adds	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	dbf1      	blt.n	80002e0 <_write+0x12>
  return len;
 80002fc:	687b      	ldr	r3, [r7, #4]
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3718      	adds	r7, #24
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030e:	f000 f9d1 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000312:	f000 f837 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000316:	f000 f879 	bl	800040c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world\n");
 800031a:	4815      	ldr	r0, [pc, #84]	; (8000370 <main+0x68>)
 800031c:	f001 fe96 	bl	800204c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000324:	4813      	ldr	r0, [pc, #76]	; (8000374 <main+0x6c>)
 8000326:	f000 fcd5 	bl	8000cd4 <HAL_GPIO_TogglePin>
	  ++count;
 800032a:	4b13      	ldr	r3, [pc, #76]	; (8000378 <main+0x70>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <main+0x70>)
 8000334:	701a      	strb	r2, [r3, #0]
	  int secret = rand() % 10 + 1;
 8000336:	f001 fe91 	bl	800205c <rand>
 800033a:	4601      	mov	r1, r0
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <main+0x74>)
 800033e:	fb83 2301 	smull	r2, r3, r3, r1
 8000342:	109a      	asrs	r2, r3, #2
 8000344:	17cb      	asrs	r3, r1, #31
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	4613      	mov	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4413      	add	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	1aca      	subs	r2, r1, r3
 8000352:	1c53      	adds	r3, r2, #1
 8000354:	607b      	str	r3, [r7, #4]
	  printf("HELLO WORLD count(%d) = %d\n", count, secret);
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <main+0x70>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	4619      	mov	r1, r3
 800035e:	4808      	ldr	r0, [pc, #32]	; (8000380 <main+0x78>)
 8000360:	f001 fe00 	bl	8001f64 <iprintf>
	  HAL_Delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f000 fa0a 	bl	8000780 <HAL_Delay>
  {
 800036c:	e7d8      	b.n	8000320 <main+0x18>
 800036e:	bf00      	nop
 8000370:	08002e84 	.word	0x08002e84
 8000374:	48000400 	.word	0x48000400
 8000378:	2000008c 	.word	0x2000008c
 800037c:	66666667 	.word	0x66666667
 8000380:	08002e90 	.word	0x08002e90

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b090      	sub	sp, #64	; 0x40
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f001 fdde 	bl	8001f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	2302      	movs	r3, #2
 80003a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	2310      	movs	r3, #16
 80003b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b2:	2302      	movs	r3, #2
 80003b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fc9c 	bl	8000d08 <HAL_RCC_OscConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003d6:	f000 f84b 	bl	8000470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003da:	230f      	movs	r3, #15
 80003dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003de:	2302      	movs	r3, #2
 80003e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2102      	movs	r1, #2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fb9d 	bl	8001b34 <HAL_RCC_ClockConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000400:	f000 f836 	bl	8000470 <Error_Handler>
  }
}
 8000404:	bf00      	nop
 8000406:	3740      	adds	r7, #64	; 0x40
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_GPIO_Init+0x5c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a10      	ldr	r2, [pc, #64]	; (8000468 <MX_GPIO_Init+0x5c>)
 8000426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_GPIO_Init+0x5c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043e:	480b      	ldr	r0, [pc, #44]	; (800046c <MX_GPIO_Init+0x60>)
 8000440:	f000 fc30 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000448:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_GPIO_Init+0x60>)
 800045c:	f000 fa98 	bl	8000990 <HAL_GPIO_Init>

}
 8000460:	bf00      	nop
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48000400 	.word	0x48000400

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <HAL_MspInit+0x44>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <HAL_MspInit+0x44>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <HAL_MspInit+0x44>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <HAL_MspInit+0x44>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <HAL_MspInit+0x44>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_MspInit+0x44>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <MemManage_Handler+0x4>

080004e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <UsageFault_Handler+0x4>

080004ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051c:	f000 f910 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	e00a      	b.n	800054c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000536:	f3af 8000 	nop.w
 800053a:	4601      	mov	r1, r0
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	b2ca      	uxtb	r2, r1
 8000544:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf0      	blt.n	8000536 <_read+0x12>
	}

return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
	return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000586:	605a      	str	r2, [r3, #4]
	return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <_isatty>:

int _isatty(int file)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	return 1;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <_sbrk+0x5c>)
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <_sbrk+0x60>)
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <_sbrk+0x64>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <_sbrk+0x68>)
 80005e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	693a      	ldr	r2, [r7, #16]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d207      	bcs.n	8000608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f8:	f001 fc82 	bl	8001f00 <__errno>
 80005fc:	4602      	mov	r2, r0
 80005fe:	230c      	movs	r3, #12
 8000600:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	e009      	b.n	800061c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <_sbrk+0x64>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <_sbrk+0x64>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <_sbrk+0x64>)
 8000618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20010000 	.word	0x20010000
 8000628:	00000400 	.word	0x00000400
 800062c:	20000090 	.word	0x20000090
 8000630:	200000a8 	.word	0x200000a8

08000634 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <SystemInit+0x28>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063e:	4a07      	ldr	r2, [pc, #28]	; (800065c <SystemInit+0x28>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <SystemInit+0x28>)
 800064a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800064e:	609a      	str	r2, [r3, #8]
#endif
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000664:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000666:	e003      	b.n	8000670 <LoopCopyDataInit>

08000668 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800066a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800066c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800066e:	3104      	adds	r1, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000674:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000676:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000678:	d3f6      	bcc.n	8000668 <CopyDataInit>
	ldr	r2, =_sbss
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800067c:	e002      	b.n	8000684 <LoopFillZerobss>

0800067e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800067e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000680:	f842 3b04 	str.w	r3, [r2], #4

08000684 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <LoopForever+0x16>)
	cmp	r2, r3
 8000686:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000688:	d3f9      	bcc.n	800067e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800068a:	f7ff ffd3 	bl	8000634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800068e:	f001 fc3d 	bl	8001f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000692:	f7ff fe39 	bl	8000308 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000698:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800069c:	08002f7c 	.word	0x08002f7c
	ldr	r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006a4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80006a8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80006ac:	200000a4 	.word	0x200000a4

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_Init+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_Init+0x28>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f92f 	bl	8000928 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff fed6 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40022000 	.word	0x40022000

080006e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f939 	bl	8000976 <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f90f 	bl	800093e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	2000009c 	.word	0x2000009c

08000768 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;  
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2000009c 	.word	0x2000009c

08000780 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff ffee 	bl	8000768 <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_Delay+0x40>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffde 	bl	8000768 <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_SetPriority>:
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <SysTick_Config>:
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f4:	d301      	bcc.n	80008fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80008f6:	2301      	movs	r3, #1
 80008f8:	e00f      	b.n	800091a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <SysTick_Config+0x40>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000902:	210f      	movs	r1, #15
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f7ff ff8e 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SysTick_Config+0x40>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SysTick_Config+0x40>)
 8000914:	2207      	movs	r2, #7
 8000916:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff47 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000950:	f7ff ff5c 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f7ff ff8e 	bl	800087c <NVIC_EncodePriority>
 8000960:	4602      	mov	r2, r0
 8000962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff5d 	bl	8000828 <__NVIC_SetPriority>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffb0 	bl	80008e4 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e160      	b.n	8000c62 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8152 	beq.w	8000c5c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x38>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d123      	bne.n	8000a10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	08da      	lsrs	r2, r3, #3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3208      	adds	r2, #8
 80009d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0203 	and.w	r2, r3, #3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b12      	cmp	r3, #18
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 80ac 	beq.w	8000c5c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <HAL_GPIO_Init+0x2f0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b1c:	4a59      	ldr	r2, [pc, #356]	; (8000c84 <HAL_GPIO_Init+0x2f4>)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3302      	adds	r3, #2
 8000b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	220f      	movs	r2, #15
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b46:	d025      	beq.n	8000b94 <HAL_GPIO_Init+0x204>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4f      	ldr	r2, [pc, #316]	; (8000c88 <HAL_GPIO_Init+0x2f8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d01f      	beq.n	8000b90 <HAL_GPIO_Init+0x200>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <HAL_GPIO_Init+0x2fc>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d019      	beq.n	8000b8c <HAL_GPIO_Init+0x1fc>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4d      	ldr	r2, [pc, #308]	; (8000c90 <HAL_GPIO_Init+0x300>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1f8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a4c      	ldr	r2, [pc, #304]	; (8000c94 <HAL_GPIO_Init+0x304>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1f4>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a4b      	ldr	r2, [pc, #300]	; (8000c98 <HAL_GPIO_Init+0x308>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1f0>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <HAL_GPIO_Init+0x30c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1ec>
 8000b78:	2306      	movs	r3, #6
 8000b7a:	e00c      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	e00a      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b80:	2305      	movs	r3, #5
 8000b82:	e008      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b84:	2304      	movs	r3, #4
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e004      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b94:	2300      	movs	r3, #0
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	f002 0203 	and.w	r2, r2, #3
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4093      	lsls	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba6:	4937      	ldr	r1, [pc, #220]	; (8000c84 <HAL_GPIO_Init+0x2f4>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb4:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd8:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c02:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c08:	4b25      	ldr	r3, [pc, #148]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f ae97 	bne.w	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000c72:	bf00      	nop
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010000 	.word	0x40010000
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000c00 	.word	0x48000c00
 8000c94:	48001000 	.word	0x48001000
 8000c98:	48001400 	.word	0x48001400
 8000c9c:	48001800 	.word	0x48001800
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc0:	e002      	b.n	8000cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	695a      	ldr	r2, [r3, #20]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d004      	beq.n	8000cf6 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	041a      	lsls	r2, r3, #16
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cf4:	e002      	b.n	8000cfc <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f000 bf01 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 8160 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d32:	4bae      	ldr	r3, [pc, #696]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d00c      	beq.n	8000d58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d3e:	4bab      	ldr	r3, [pc, #684]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d159      	bne.n	8000dfe <HAL_RCC_OscConfig+0xf6>
 8000d4a:	4ba8      	ldr	r3, [pc, #672]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d56:	d152      	bne.n	8000dfe <HAL_RCC_OscConfig+0xf6>
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x82>
 8000d84:	4b99      	ldr	r3, [pc, #612]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0xae>
 8000d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000da6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000daa:	fa93 f3a3 	rbit	r3, r3
 8000dae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000db2:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dbe:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000dc2:	fa92 f2a2 	rbit	r2, r2
 8000dc6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	f042 0220 	orr.w	r2, r2, #32
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	f002 021f 	and.w	r2, r2, #31
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 8102 	beq.w	8000ff0 <HAL_RCC_OscConfig+0x2e8>
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 80fc 	bne.w	8000ff0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f000 be93 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e08:	d106      	bne.n	8000e18 <HAL_RCC_OscConfig+0x110>
 8000e0a:	4b78      	ldr	r3, [pc, #480]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a77      	ldr	r2, [pc, #476]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e030      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x134>
 8000e22:	4b72      	ldr	r3, [pc, #456]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a71      	ldr	r2, [pc, #452]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	4b6f      	ldr	r3, [pc, #444]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a6e      	ldr	r2, [pc, #440]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e01e      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e46:	d10c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x15a>
 8000e48:	4b68      	ldr	r3, [pc, #416]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a67      	ldr	r2, [pc, #412]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b65      	ldr	r3, [pc, #404]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a64      	ldr	r2, [pc, #400]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e00b      	b.n	8000e7a <HAL_RCC_OscConfig+0x172>
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a61      	ldr	r2, [pc, #388]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a5e      	ldr	r2, [pc, #376]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e78:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d059      	beq.n	8000f38 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fc70 	bl	8000768 <HAL_GetTick>
 8000e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fc6b 	bl	8000768 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b64      	cmp	r3, #100	; 0x64
 8000e9c:	d902      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	f000 be40 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8000ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000eb0:	fa93 f3a3 	rbit	r3, r3
 8000eb4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000eb8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d102      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x1ce>
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	e015      	b.n	8000f02 <HAL_RCC_OscConfig+0x1fa>
 8000ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ef2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ef6:	fa93 f3a3 	rbit	r3, r3
 8000efa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f0e:	fa92 f2a2 	rbit	r2, r2
 8000f12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f1a:	fab2 f282 	clz	r2, r2
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	f042 0220 	orr.w	r2, r2, #32
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	f002 021f 	and.w	r2, r2, #31
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0ab      	beq.n	8000e8e <HAL_RCC_OscConfig+0x186>
 8000f36:	e05c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc16 	bl	8000768 <HAL_GetTick>
 8000f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f42:	f7ff fc11 	bl	8000768 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b64      	cmp	r3, #100	; 0x64
 8000f50:	d902      	bls.n	8000f58 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f000 bde6 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8000f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f64:	fa93 f3a3 	rbit	r3, r3
 8000f68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f70:	fab3 f383 	clz	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0x282>
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	e015      	b.n	8000fb6 <HAL_RCC_OscConfig+0x2ae>
 8000f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fbe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fc2:	fa92 f2a2 	rbit	r2, r2
 8000fc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fce:	fab2 f282 	clz	r2, r2
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	f042 0220 	orr.w	r2, r2, #32
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	f002 021f 	and.w	r2, r2, #31
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1ab      	bne.n	8000f42 <HAL_RCC_OscConfig+0x23a>
 8000fea:	e002      	b.n	8000ff2 <HAL_RCC_OscConfig+0x2ea>
 8000fec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 8170 	beq.w	80012e2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001002:	4bd0      	ldr	r3, [pc, #832]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00c      	beq.n	8001028 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800100e:	4bcd      	ldr	r3, [pc, #820]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d16d      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3ee>
 800101a:	4bca      	ldr	r3, [pc, #808]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001026:	d166      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3ee>
 8001028:	2302      	movs	r3, #2
 800102a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800103a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x350>
 8001052:	4bbc      	ldr	r3, [pc, #752]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e013      	b.n	8001080 <HAL_RCC_OscConfig+0x378>
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001070:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800107c:	4bb1      	ldr	r3, [pc, #708]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	2202      	movs	r2, #2
 8001082:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001086:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800108a:	fa92 f2a2 	rbit	r2, r2
 800108e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001092:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001096:	fab2 f282 	clz	r2, r2
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	f042 0220 	orr.w	r2, r2, #32
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	f002 021f 	and.w	r2, r2, #31
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <HAL_RCC_OscConfig+0x3ba>
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d002      	beq.n	80010c2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	f000 bd31 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	21f8      	movs	r1, #248	; 0xf8
 80010d2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010da:	fa91 f1a1 	rbit	r1, r1
 80010de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010e6:	fab1 f181 	clz	r1, r1
 80010ea:	b2c9      	uxtb	r1, r1
 80010ec:	408b      	lsls	r3, r1
 80010ee:	4995      	ldr	r1, [pc, #596]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f4:	e0f5      	b.n	80012e2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 8085 	beq.w	800120c <HAL_RCC_OscConfig+0x504>
 8001102:	2301      	movs	r3, #1
 8001104:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001108:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800110c:	fa93 f3a3 	rbit	r3, r3
 8001110:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001114:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	fab3 f383 	clz	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001122:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	461a      	mov	r2, r3
 800112a:	2301      	movs	r3, #1
 800112c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112e:	f7ff fb1b 	bl	8000768 <HAL_GetTick>
 8001132:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	e00a      	b.n	800114e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fb16 	bl	8000768 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d902      	bls.n	800114e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	f000 bceb 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001154:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001160:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x476>
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	e013      	b.n	80011a6 <HAL_RCC_OscConfig+0x49e>
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001196:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011a2:	4b68      	ldr	r3, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	2202      	movs	r2, #2
 80011a8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011b0:	fa92 f2a2 	rbit	r2, r2
 80011b4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	f042 0220 	orr.w	r2, r2, #32
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	f002 021f 	and.w	r2, r2, #31
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0af      	beq.n	8001138 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	21f8      	movs	r1, #248	; 0xf8
 80011e8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011f0:	fa91 f1a1 	rbit	r1, r1
 80011f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011fc:	fab1 f181 	clz	r1, r1
 8001200:	b2c9      	uxtb	r1, r1
 8001202:	408b      	lsls	r3, r1
 8001204:	494f      	ldr	r1, [pc, #316]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
 800120a:	e06a      	b.n	80012e2 <HAL_RCC_OscConfig+0x5da>
 800120c:	2301      	movs	r3, #1
 800120e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800121e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800122c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	461a      	mov	r2, r3
 8001234:	2300      	movs	r3, #0
 8001236:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fa96 	bl	8000768 <HAL_GetTick>
 800123c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fa91 	bl	8000768 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d902      	bls.n	8001258 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	f000 bc66 	b.w	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800126a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	fab3 f383 	clz	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	095b      	lsrs	r3, r3, #5
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d102      	bne.n	8001288 <HAL_RCC_OscConfig+0x580>
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	e013      	b.n	80012b0 <HAL_RCC_OscConfig+0x5a8>
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012a4:	fa93 f3a3 	rbit	r3, r3
 80012a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_RCC_OscConfig+0x63c>)
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	2202      	movs	r2, #2
 80012b2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012b6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012ba:	fa92 f2a2 	rbit	r2, r2
 80012be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012c6:	fab2 f282 	clz	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f042 0220 	orr.w	r2, r2, #32
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	f002 021f 	and.w	r2, r2, #31
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1af      	bne.n	8001242 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80da 	beq.w	80014a6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d069      	beq.n	80013d0 <HAL_RCC_OscConfig+0x6c8>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800130e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x640>)
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fa1f 	bl	8000768 <HAL_GetTick>
 800132a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e00d      	b.n	800134c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fa1a 	bl	8000768 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d905      	bls.n	800134c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e3ef      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8001344:	40021000 	.word	0x40021000
 8001348:	10908120 	.word	0x10908120
 800134c:	2302      	movs	r3, #2
 800134e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001356:	fa93 f2a3 	rbit	r2, r3
 800135a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f2a3 	rbit	r2, r3
 8001372:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800137c:	2202      	movs	r2, #2
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800138e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4ba4      	ldr	r3, [pc, #656]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001398:	2102      	movs	r1, #2
 800139a:	6019      	str	r1, [r3, #0]
 800139c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f1a3 	rbit	r1, r3
 80013a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013aa:	6019      	str	r1, [r3, #0]
  return result;
 80013ac:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0b0      	beq.n	8001330 <HAL_RCC_OscConfig+0x628>
 80013ce:	e06a      	b.n	80014a6 <HAL_RCC_OscConfig+0x79e>
 80013d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013e6:	601a      	str	r2, [r3, #0]
  return result;
 80013e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <HAL_RCC_OscConfig+0x920>)
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	2300      	movs	r3, #0
 8001400:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff f9b1 	bl	8000768 <HAL_GetTick>
 8001406:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140a:	e009      	b.n	8001420 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff f9ac 	bl	8000768 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e381      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8001420:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001424:	2202      	movs	r2, #2
 8001426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001428:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	fa93 f2a3 	rbit	r2, r3
 8001432:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001466:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 800146a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001470:	2102      	movs	r1, #2
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f1a3 	rbit	r1, r3
 800147e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001482:	6019      	str	r1, [r3, #0]
  return result;
 8001484:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1b2      	bne.n	800140c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8157 	beq.w	8001764 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a55      	ldr	r2, [pc, #340]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	61d3      	str	r3, [r2, #28]
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCC_OscConfig+0x924>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d11a      	bne.n	8001530 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x924>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a4b      	ldr	r2, [pc, #300]	; (800162c <HAL_RCC_OscConfig+0x924>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001506:	f7ff f92f 	bl	8000768 <HAL_GetTick>
 800150a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	e009      	b.n	8001524 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001510:	f7ff f92a 	bl	8000768 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b64      	cmp	r3, #100	; 0x64
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e2ff      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_RCC_OscConfig+0x924>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ef      	beq.n	8001510 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <HAL_RCC_OscConfig+0x840>
 800153a:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a39      	ldr	r2, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e02f      	b.n	80015a8 <HAL_RCC_OscConfig+0x8a0>
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x864>
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a33      	ldr	r2, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b31      	ldr	r3, [pc, #196]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a30      	ldr	r2, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0x8a0>
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x888>
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x8a0>
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d06a      	beq.n	8001688 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f8d9 	bl	8000768 <HAL_GetTick>
 80015b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff f8d4 	bl	8000768 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2a7      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 80015d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f2a3 	rbit	r2, r3
 80015e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001602:	601a      	str	r2, [r3, #0]
  return result;
 8001604:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001608:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d108      	bne.n	8001630 <HAL_RCC_OscConfig+0x928>
 800161e:	4b01      	ldr	r3, [pc, #4]	; (8001624 <HAL_RCC_OscConfig+0x91c>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x944>
 8001624:	40021000 	.word	0x40021000
 8001628:	10908120 	.word	0x10908120
 800162c:	40007000 	.word	0x40007000
 8001630:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	fa93 f2a3 	rbit	r2, r3
 8001642:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	4bc0      	ldr	r3, [pc, #768]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001650:	2102      	movs	r1, #2
 8001652:	6011      	str	r1, [r2, #0]
 8001654:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	fa92 f1a2 	rbit	r1, r2
 800165e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001662:	6011      	str	r1, [r2, #0]
  return result;
 8001664:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	fab2 f282 	clz	r2, r2
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f002 021f 	and.w	r2, r2, #31
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d09a      	beq.n	80015bc <HAL_RCC_OscConfig+0x8b4>
 8001686:	e063      	b.n	8001750 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f86e 	bl	8000768 <HAL_GetTick>
 800168c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f869 	bl	8000768 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e23c      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 80016aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016d8:	601a      	str	r2, [r3, #0]
  return result;
 80016da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x9f2>
 80016f4:	4b95      	ldr	r3, [pc, #596]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	e00d      	b.n	8001716 <HAL_RCC_OscConfig+0xa0e>
 80016fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016fe:	2202      	movs	r2, #2
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	4b8e      	ldr	r3, [pc, #568]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800171a:	2102      	movs	r1, #2
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fa92 f1a2 	rbit	r1, r2
 8001728:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800172c:	6011      	str	r1, [r2, #0]
  return result;
 800172e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1a0      	bne.n	8001692 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001750:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a7b      	ldr	r2, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 81d9 	beq.w	8001b22 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	f000 81a6 	beq.w	8001aca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 811e 	bne.w	80019c6 <HAL_RCC_OscConfig+0xcbe>
 800178a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800178e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a2:	601a      	str	r2, [r3, #0]
  return result;
 80017a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	461a      	mov	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7fe ffd2 	bl	8000768 <HAL_GetTick>
 80017c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	e009      	b.n	80017de <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7fe ffcd 	bl	8000768 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1a2      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 80017de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017f6:	601a      	str	r2, [r3, #0]
  return result;
 80017f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0xb10>
 8001812:	4b4e      	ldr	r3, [pc, #312]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0xb48>
 8001818:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001854:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fa92 f1a2 	rbit	r1, r2
 8001864:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001868:	6011      	str	r1, [r2, #0]
  return result;
 800186a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fab2 f282 	clz	r2, r2
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	f002 021f 	and.w	r2, r2, #31
 8001880:	2101      	movs	r1, #1
 8001882:	fa01 f202 	lsl.w	r2, r1, r2
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d19e      	bne.n	80017ca <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	f023 020f 	bic.w	r2, r3, #15
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	492c      	ldr	r1, [pc, #176]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 800189c:	4313      	orrs	r3, r2
 800189e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a19      	ldr	r1, [r3, #32]
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
 80018bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d4:	601a      	str	r2, [r3, #0]
  return result;
 80018d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	2301      	movs	r3, #1
 80018f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7fe ff39 	bl	8000768 <HAL_GetTick>
 80018f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ff34 	bl	8000768 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e109      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8001910:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001928:	601a      	str	r2, [r3, #0]
  return result;
 800192a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800192e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0xc48>
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <HAL_RCC_OscConfig+0xc44>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e01e      	b.n	8001988 <HAL_RCC_OscConfig+0xc80>
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001954:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800196e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_OscConfig+0xe28>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800198c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fa92 f1a2 	rbit	r1, r2
 800199c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019a0:	6011      	str	r1, [r2, #0]
  return result;
 80019a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d09b      	beq.n	80018fc <HAL_RCC_OscConfig+0xbf4>
 80019c4:	e0ad      	b.n	8001b22 <HAL_RCC_OscConfig+0xe1a>
 80019c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019de:	601a      	str	r2, [r3, #0]
  return result;
 80019e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	461a      	mov	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7fe feb4 	bl	8000768 <HAL_GetTick>
 8001a00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7fe feaf 	bl	8000768 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e084      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a32:	601a      	str	r2, [r3, #0]
  return result;
 8001a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0xd4c>
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_OscConfig+0xe28>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0xd84>
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f107 0318 	add.w	r3, r7, #24
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_RCC_OscConfig+0xe28>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f107 0214 	add.w	r2, r7, #20
 8001a90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a94:	6011      	str	r1, [r2, #0]
 8001a96:	f107 0214 	add.w	r2, r7, #20
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fa92 f1a2 	rbit	r1, r2
 8001aa0:	f107 0210 	add.w	r2, r7, #16
 8001aa4:	6011      	str	r1, [r2, #0]
  return result;
 8001aa6:	f107 0210 	add.w	r2, r7, #16
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	fab2 f282 	clz	r2, r2
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f042 0220 	orr.w	r2, r2, #32
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 021f 	and.w	r2, r2, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d19e      	bne.n	8001a06 <HAL_RCC_OscConfig+0xcfe>
 8001ac8:	e02b      	b.n	8001b22 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e025      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0xe28>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_OscConfig+0xe28>)
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001aec:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d111      	bne.n	8001b1e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001afa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d108      	bne.n	8001b1e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09e      	sub	sp, #120	; 0x78
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e162      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b90      	ldr	r3, [pc, #576]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d910      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b8d      	ldr	r3, [pc, #564]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	498b      	ldr	r1, [pc, #556]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e14a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	497f      	ldr	r1, [pc, #508]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80dc 	beq.w	8001d60 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d13c      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xf6>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_ClockConfig+0xa6>
 8001bd4:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e00f      	b.n	8001bfa <HAL_RCC_ClockConfig+0xc6>
 8001bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	667b      	str	r3, [r7, #100]	; 0x64
 8001be8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bec:	663b      	str	r3, [r7, #96]	; 0x60
 8001bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c02:	fa92 f2a2 	rbit	r2, r2
 8001c06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d17b      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0f3      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d13c      	bne.n	8001cac <HAL_RCC_ClockConfig+0x178>
 8001c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x128>
 8001c56:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e00f      	b.n	8001c7c <HAL_RCC_ClockConfig+0x148>
 8001c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c78:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c80:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c84:	fa92 f2a2 	rbit	r2, r2
 8001c88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d13a      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0b2      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d102      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x1a0>
 8001cce:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e00d      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1bc>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	61ba      	str	r2, [r7, #24]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	fa92 f2a2 	rbit	r2, r2
 8001cfa:	617a      	str	r2, [r7, #20]
  return result;
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e079      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	491a      	ldr	r1, [pc, #104]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d30:	f7fe fd1a 	bl	8000768 <HAL_GetTick>
 8001d34:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7fe fd16 	bl	8000768 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e061      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_ClockConfig+0x260>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d214      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0207 	bic.w	r2, r3, #7
 8001d76:	4906      	ldr	r1, [pc, #24]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e040      	b.n	8001e12 <HAL_RCC_ClockConfig+0x2de>
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_RCC_ClockConfig+0x2e8>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	491a      	ldr	r1, [pc, #104]	; (8001e1c <HAL_RCC_ClockConfig+0x2e8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCC_ClockConfig+0x2e8>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4912      	ldr	r1, [pc, #72]	; (8001e1c <HAL_RCC_ClockConfig+0x2e8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dd6:	f000 f829 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001dda:	4601      	mov	r1, r0
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCC_ClockConfig+0x2e8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	22f0      	movs	r2, #240	; 0xf0
 8001de6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	fa92 f2a2 	rbit	r2, r2
 8001dee:	60fa      	str	r2, [r7, #12]
  return result;
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	40d3      	lsrs	r3, r2
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x2ec>)
 8001dfc:	5cd3      	ldrb	r3, [r2, r3]
 8001dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_RCC_ClockConfig+0x2f0>)
 8001e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_ClockConfig+0x2f4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fc68 	bl	80006e0 <HAL_InitTick>
  
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3778      	adds	r7, #120	; 0x78
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	08002eac 	.word	0x08002eac
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b08b      	sub	sp, #44	; 0x2c
 8001e30:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x30>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x36>
 8001e5a:	e03f      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	e03f      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e68:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e6c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	fa92 f2a2 	rbit	r2, r2
 8001e74:	607a      	str	r2, [r7, #4]
  return result;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	40d3      	lsrs	r3, r2
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	220f      	movs	r2, #15
 8001e90:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	60fa      	str	r2, [r7, #12]
  return result;
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	40d3      	lsrs	r3, r2
 8001ea4:	4a15      	ldr	r2, [pc, #84]	; (8001efc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	e007      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	623b      	str	r3, [r7, #32]
      break;
 8001eda:	e002      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ede:	623b      	str	r3, [r7, #32]
      break;
 8001ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	372c      	adds	r7, #44	; 0x2c
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	007a1200 	.word	0x007a1200
 8001ef8:	08002ebc 	.word	0x08002ebc
 8001efc:	08002ecc 	.word	0x08002ecc

08001f00 <__errno>:
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <__errno+0x8>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <__libc_init_array>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	4e0d      	ldr	r6, [pc, #52]	; (8001f44 <__libc_init_array+0x38>)
 8001f10:	4c0d      	ldr	r4, [pc, #52]	; (8001f48 <__libc_init_array+0x3c>)
 8001f12:	1ba4      	subs	r4, r4, r6
 8001f14:	10a4      	asrs	r4, r4, #2
 8001f16:	2500      	movs	r5, #0
 8001f18:	42a5      	cmp	r5, r4
 8001f1a:	d109      	bne.n	8001f30 <__libc_init_array+0x24>
 8001f1c:	4e0b      	ldr	r6, [pc, #44]	; (8001f4c <__libc_init_array+0x40>)
 8001f1e:	4c0c      	ldr	r4, [pc, #48]	; (8001f50 <__libc_init_array+0x44>)
 8001f20:	f000 ffa4 	bl	8002e6c <_init>
 8001f24:	1ba4      	subs	r4, r4, r6
 8001f26:	10a4      	asrs	r4, r4, #2
 8001f28:	2500      	movs	r5, #0
 8001f2a:	42a5      	cmp	r5, r4
 8001f2c:	d105      	bne.n	8001f3a <__libc_init_array+0x2e>
 8001f2e:	bd70      	pop	{r4, r5, r6, pc}
 8001f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f34:	4798      	blx	r3
 8001f36:	3501      	adds	r5, #1
 8001f38:	e7ee      	b.n	8001f18 <__libc_init_array+0xc>
 8001f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f3e:	4798      	blx	r3
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7f2      	b.n	8001f2a <__libc_init_array+0x1e>
 8001f44:	08002f74 	.word	0x08002f74
 8001f48:	08002f74 	.word	0x08002f74
 8001f4c:	08002f74 	.word	0x08002f74
 8001f50:	08002f78 	.word	0x08002f78

08001f54 <memset>:
 8001f54:	4402      	add	r2, r0
 8001f56:	4603      	mov	r3, r0
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <memset+0xa>
 8001f5c:	4770      	bx	lr
 8001f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f62:	e7f9      	b.n	8001f58 <memset+0x4>

08001f64 <iprintf>:
 8001f64:	b40f      	push	{r0, r1, r2, r3}
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <iprintf+0x2c>)
 8001f68:	b513      	push	{r0, r1, r4, lr}
 8001f6a:	681c      	ldr	r4, [r3, #0]
 8001f6c:	b124      	cbz	r4, 8001f78 <iprintf+0x14>
 8001f6e:	69a3      	ldr	r3, [r4, #24]
 8001f70:	b913      	cbnz	r3, 8001f78 <iprintf+0x14>
 8001f72:	4620      	mov	r0, r4
 8001f74:	f000 fa56 	bl	8002424 <__sinit>
 8001f78:	ab05      	add	r3, sp, #20
 8001f7a:	9a04      	ldr	r2, [sp, #16]
 8001f7c:	68a1      	ldr	r1, [r4, #8]
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	4620      	mov	r0, r4
 8001f82:	f000 fc17 	bl	80027b4 <_vfiprintf_r>
 8001f86:	b002      	add	sp, #8
 8001f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f8c:	b004      	add	sp, #16
 8001f8e:	4770      	bx	lr
 8001f90:	2000000c 	.word	0x2000000c

08001f94 <_puts_r>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	460e      	mov	r6, r1
 8001f98:	4605      	mov	r5, r0
 8001f9a:	b118      	cbz	r0, 8001fa4 <_puts_r+0x10>
 8001f9c:	6983      	ldr	r3, [r0, #24]
 8001f9e:	b90b      	cbnz	r3, 8001fa4 <_puts_r+0x10>
 8001fa0:	f000 fa40 	bl	8002424 <__sinit>
 8001fa4:	69ab      	ldr	r3, [r5, #24]
 8001fa6:	68ac      	ldr	r4, [r5, #8]
 8001fa8:	b913      	cbnz	r3, 8001fb0 <_puts_r+0x1c>
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 fa3a 	bl	8002424 <__sinit>
 8001fb0:	4b23      	ldr	r3, [pc, #140]	; (8002040 <_puts_r+0xac>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d117      	bne.n	8001fe6 <_puts_r+0x52>
 8001fb6:	686c      	ldr	r4, [r5, #4]
 8001fb8:	89a3      	ldrh	r3, [r4, #12]
 8001fba:	071b      	lsls	r3, r3, #28
 8001fbc:	d51d      	bpl.n	8001ffa <_puts_r+0x66>
 8001fbe:	6923      	ldr	r3, [r4, #16]
 8001fc0:	b1db      	cbz	r3, 8001ffa <_puts_r+0x66>
 8001fc2:	3e01      	subs	r6, #1
 8001fc4:	68a3      	ldr	r3, [r4, #8]
 8001fc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	60a3      	str	r3, [r4, #8]
 8001fce:	b9e9      	cbnz	r1, 800200c <_puts_r+0x78>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da2e      	bge.n	8002032 <_puts_r+0x9e>
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	210a      	movs	r1, #10
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f000 f873 	bl	80020c4 <__swbuf_r>
 8001fde:	3001      	adds	r0, #1
 8001fe0:	d011      	beq.n	8002006 <_puts_r+0x72>
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	e011      	b.n	800200a <_puts_r+0x76>
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <_puts_r+0xb0>)
 8001fe8:	429c      	cmp	r4, r3
 8001fea:	d101      	bne.n	8001ff0 <_puts_r+0x5c>
 8001fec:	68ac      	ldr	r4, [r5, #8]
 8001fee:	e7e3      	b.n	8001fb8 <_puts_r+0x24>
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <_puts_r+0xb4>)
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	bf08      	it	eq
 8001ff6:	68ec      	ldreq	r4, [r5, #12]
 8001ff8:	e7de      	b.n	8001fb8 <_puts_r+0x24>
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f000 f8b3 	bl	8002168 <__swsetup_r>
 8002002:	2800      	cmp	r0, #0
 8002004:	d0dd      	beq.n	8001fc2 <_puts_r+0x2e>
 8002006:	f04f 30ff 	mov.w	r0, #4294967295
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	2b00      	cmp	r3, #0
 800200e:	da04      	bge.n	800201a <_puts_r+0x86>
 8002010:	69a2      	ldr	r2, [r4, #24]
 8002012:	429a      	cmp	r2, r3
 8002014:	dc06      	bgt.n	8002024 <_puts_r+0x90>
 8002016:	290a      	cmp	r1, #10
 8002018:	d004      	beq.n	8002024 <_puts_r+0x90>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	6022      	str	r2, [r4, #0]
 8002020:	7019      	strb	r1, [r3, #0]
 8002022:	e7cf      	b.n	8001fc4 <_puts_r+0x30>
 8002024:	4622      	mov	r2, r4
 8002026:	4628      	mov	r0, r5
 8002028:	f000 f84c 	bl	80020c4 <__swbuf_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d1c9      	bne.n	8001fc4 <_puts_r+0x30>
 8002030:	e7e9      	b.n	8002006 <_puts_r+0x72>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	200a      	movs	r0, #10
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	6022      	str	r2, [r4, #0]
 800203a:	7018      	strb	r0, [r3, #0]
 800203c:	e7e5      	b.n	800200a <_puts_r+0x76>
 800203e:	bf00      	nop
 8002040:	08002f00 	.word	0x08002f00
 8002044:	08002f20 	.word	0x08002f20
 8002048:	08002ee0 	.word	0x08002ee0

0800204c <puts>:
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <puts+0xc>)
 800204e:	4601      	mov	r1, r0
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	f7ff bf9f 	b.w	8001f94 <_puts_r>
 8002056:	bf00      	nop
 8002058:	2000000c 	.word	0x2000000c

0800205c <rand>:
 800205c:	b538      	push	{r3, r4, r5, lr}
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <rand+0x50>)
 8002060:	681c      	ldr	r4, [r3, #0]
 8002062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002064:	b97b      	cbnz	r3, 8002086 <rand+0x2a>
 8002066:	2018      	movs	r0, #24
 8002068:	f000 faca 	bl	8002600 <malloc>
 800206c:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <rand+0x54>)
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <rand+0x58>)
 8002070:	63a0      	str	r0, [r4, #56]	; 0x38
 8002072:	e9c0 2300 	strd	r2, r3, [r0]
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <rand+0x5c>)
 8002078:	6083      	str	r3, [r0, #8]
 800207a:	230b      	movs	r3, #11
 800207c:	8183      	strh	r3, [r0, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	2300      	movs	r3, #0
 8002082:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <rand+0x60>)
 800208a:	690a      	ldr	r2, [r1, #16]
 800208c:	694b      	ldr	r3, [r1, #20]
 800208e:	4c0c      	ldr	r4, [pc, #48]	; (80020c0 <rand+0x64>)
 8002090:	4350      	muls	r0, r2
 8002092:	fb04 0003 	mla	r0, r4, r3, r0
 8002096:	fba2 2304 	umull	r2, r3, r2, r4
 800209a:	4403      	add	r3, r0
 800209c:	1c54      	adds	r4, r2, #1
 800209e:	f143 0500 	adc.w	r5, r3, #0
 80020a2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80020a6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80020aa:	bd38      	pop	{r3, r4, r5, pc}
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	abcd330e 	.word	0xabcd330e
 80020b4:	e66d1234 	.word	0xe66d1234
 80020b8:	0005deec 	.word	0x0005deec
 80020bc:	5851f42d 	.word	0x5851f42d
 80020c0:	4c957f2d 	.word	0x4c957f2d

080020c4 <__swbuf_r>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	460e      	mov	r6, r1
 80020c8:	4614      	mov	r4, r2
 80020ca:	4605      	mov	r5, r0
 80020cc:	b118      	cbz	r0, 80020d6 <__swbuf_r+0x12>
 80020ce:	6983      	ldr	r3, [r0, #24]
 80020d0:	b90b      	cbnz	r3, 80020d6 <__swbuf_r+0x12>
 80020d2:	f000 f9a7 	bl	8002424 <__sinit>
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <__swbuf_r+0x98>)
 80020d8:	429c      	cmp	r4, r3
 80020da:	d12a      	bne.n	8002132 <__swbuf_r+0x6e>
 80020dc:	686c      	ldr	r4, [r5, #4]
 80020de:	69a3      	ldr	r3, [r4, #24]
 80020e0:	60a3      	str	r3, [r4, #8]
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	071a      	lsls	r2, r3, #28
 80020e6:	d52e      	bpl.n	8002146 <__swbuf_r+0x82>
 80020e8:	6923      	ldr	r3, [r4, #16]
 80020ea:	b363      	cbz	r3, 8002146 <__swbuf_r+0x82>
 80020ec:	6923      	ldr	r3, [r4, #16]
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	1ac0      	subs	r0, r0, r3
 80020f2:	6963      	ldr	r3, [r4, #20]
 80020f4:	b2f6      	uxtb	r6, r6
 80020f6:	4283      	cmp	r3, r0
 80020f8:	4637      	mov	r7, r6
 80020fa:	dc04      	bgt.n	8002106 <__swbuf_r+0x42>
 80020fc:	4621      	mov	r1, r4
 80020fe:	4628      	mov	r0, r5
 8002100:	f000 f926 	bl	8002350 <_fflush_r>
 8002104:	bb28      	cbnz	r0, 8002152 <__swbuf_r+0x8e>
 8002106:	68a3      	ldr	r3, [r4, #8]
 8002108:	3b01      	subs	r3, #1
 800210a:	60a3      	str	r3, [r4, #8]
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	6022      	str	r2, [r4, #0]
 8002112:	701e      	strb	r6, [r3, #0]
 8002114:	6963      	ldr	r3, [r4, #20]
 8002116:	3001      	adds	r0, #1
 8002118:	4283      	cmp	r3, r0
 800211a:	d004      	beq.n	8002126 <__swbuf_r+0x62>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	07db      	lsls	r3, r3, #31
 8002120:	d519      	bpl.n	8002156 <__swbuf_r+0x92>
 8002122:	2e0a      	cmp	r6, #10
 8002124:	d117      	bne.n	8002156 <__swbuf_r+0x92>
 8002126:	4621      	mov	r1, r4
 8002128:	4628      	mov	r0, r5
 800212a:	f000 f911 	bl	8002350 <_fflush_r>
 800212e:	b190      	cbz	r0, 8002156 <__swbuf_r+0x92>
 8002130:	e00f      	b.n	8002152 <__swbuf_r+0x8e>
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <__swbuf_r+0x9c>)
 8002134:	429c      	cmp	r4, r3
 8002136:	d101      	bne.n	800213c <__swbuf_r+0x78>
 8002138:	68ac      	ldr	r4, [r5, #8]
 800213a:	e7d0      	b.n	80020de <__swbuf_r+0x1a>
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <__swbuf_r+0xa0>)
 800213e:	429c      	cmp	r4, r3
 8002140:	bf08      	it	eq
 8002142:	68ec      	ldreq	r4, [r5, #12]
 8002144:	e7cb      	b.n	80020de <__swbuf_r+0x1a>
 8002146:	4621      	mov	r1, r4
 8002148:	4628      	mov	r0, r5
 800214a:	f000 f80d 	bl	8002168 <__swsetup_r>
 800214e:	2800      	cmp	r0, #0
 8002150:	d0cc      	beq.n	80020ec <__swbuf_r+0x28>
 8002152:	f04f 37ff 	mov.w	r7, #4294967295
 8002156:	4638      	mov	r0, r7
 8002158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800215a:	bf00      	nop
 800215c:	08002f00 	.word	0x08002f00
 8002160:	08002f20 	.word	0x08002f20
 8002164:	08002ee0 	.word	0x08002ee0

08002168 <__swsetup_r>:
 8002168:	4b32      	ldr	r3, [pc, #200]	; (8002234 <__swsetup_r+0xcc>)
 800216a:	b570      	push	{r4, r5, r6, lr}
 800216c:	681d      	ldr	r5, [r3, #0]
 800216e:	4606      	mov	r6, r0
 8002170:	460c      	mov	r4, r1
 8002172:	b125      	cbz	r5, 800217e <__swsetup_r+0x16>
 8002174:	69ab      	ldr	r3, [r5, #24]
 8002176:	b913      	cbnz	r3, 800217e <__swsetup_r+0x16>
 8002178:	4628      	mov	r0, r5
 800217a:	f000 f953 	bl	8002424 <__sinit>
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <__swsetup_r+0xd0>)
 8002180:	429c      	cmp	r4, r3
 8002182:	d10f      	bne.n	80021a4 <__swsetup_r+0x3c>
 8002184:	686c      	ldr	r4, [r5, #4]
 8002186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800218a:	b29a      	uxth	r2, r3
 800218c:	0715      	lsls	r5, r2, #28
 800218e:	d42c      	bmi.n	80021ea <__swsetup_r+0x82>
 8002190:	06d0      	lsls	r0, r2, #27
 8002192:	d411      	bmi.n	80021b8 <__swsetup_r+0x50>
 8002194:	2209      	movs	r2, #9
 8002196:	6032      	str	r2, [r6, #0]
 8002198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219c:	81a3      	strh	r3, [r4, #12]
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
 80021a2:	e03e      	b.n	8002222 <__swsetup_r+0xba>
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <__swsetup_r+0xd4>)
 80021a6:	429c      	cmp	r4, r3
 80021a8:	d101      	bne.n	80021ae <__swsetup_r+0x46>
 80021aa:	68ac      	ldr	r4, [r5, #8]
 80021ac:	e7eb      	b.n	8002186 <__swsetup_r+0x1e>
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <__swsetup_r+0xd8>)
 80021b0:	429c      	cmp	r4, r3
 80021b2:	bf08      	it	eq
 80021b4:	68ec      	ldreq	r4, [r5, #12]
 80021b6:	e7e6      	b.n	8002186 <__swsetup_r+0x1e>
 80021b8:	0751      	lsls	r1, r2, #29
 80021ba:	d512      	bpl.n	80021e2 <__swsetup_r+0x7a>
 80021bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021be:	b141      	cbz	r1, 80021d2 <__swsetup_r+0x6a>
 80021c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021c4:	4299      	cmp	r1, r3
 80021c6:	d002      	beq.n	80021ce <__swsetup_r+0x66>
 80021c8:	4630      	mov	r0, r6
 80021ca:	f000 fa21 	bl	8002610 <_free_r>
 80021ce:	2300      	movs	r3, #0
 80021d0:	6363      	str	r3, [r4, #52]	; 0x34
 80021d2:	89a3      	ldrh	r3, [r4, #12]
 80021d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021d8:	81a3      	strh	r3, [r4, #12]
 80021da:	2300      	movs	r3, #0
 80021dc:	6063      	str	r3, [r4, #4]
 80021de:	6923      	ldr	r3, [r4, #16]
 80021e0:	6023      	str	r3, [r4, #0]
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	81a3      	strh	r3, [r4, #12]
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	b94b      	cbnz	r3, 8002202 <__swsetup_r+0x9a>
 80021ee:	89a3      	ldrh	r3, [r4, #12]
 80021f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f8:	d003      	beq.n	8002202 <__swsetup_r+0x9a>
 80021fa:	4621      	mov	r1, r4
 80021fc:	4630      	mov	r0, r6
 80021fe:	f000 f9bf 	bl	8002580 <__smakebuf_r>
 8002202:	89a2      	ldrh	r2, [r4, #12]
 8002204:	f012 0301 	ands.w	r3, r2, #1
 8002208:	d00c      	beq.n	8002224 <__swsetup_r+0xbc>
 800220a:	2300      	movs	r3, #0
 800220c:	60a3      	str	r3, [r4, #8]
 800220e:	6963      	ldr	r3, [r4, #20]
 8002210:	425b      	negs	r3, r3
 8002212:	61a3      	str	r3, [r4, #24]
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	b953      	cbnz	r3, 800222e <__swsetup_r+0xc6>
 8002218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800221c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002220:	d1ba      	bne.n	8002198 <__swsetup_r+0x30>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	0792      	lsls	r2, r2, #30
 8002226:	bf58      	it	pl
 8002228:	6963      	ldrpl	r3, [r4, #20]
 800222a:	60a3      	str	r3, [r4, #8]
 800222c:	e7f2      	b.n	8002214 <__swsetup_r+0xac>
 800222e:	2000      	movs	r0, #0
 8002230:	e7f7      	b.n	8002222 <__swsetup_r+0xba>
 8002232:	bf00      	nop
 8002234:	2000000c 	.word	0x2000000c
 8002238:	08002f00 	.word	0x08002f00
 800223c:	08002f20 	.word	0x08002f20
 8002240:	08002ee0 	.word	0x08002ee0

08002244 <__sflush_r>:
 8002244:	898a      	ldrh	r2, [r1, #12]
 8002246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800224a:	4605      	mov	r5, r0
 800224c:	0710      	lsls	r0, r2, #28
 800224e:	460c      	mov	r4, r1
 8002250:	d458      	bmi.n	8002304 <__sflush_r+0xc0>
 8002252:	684b      	ldr	r3, [r1, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dc05      	bgt.n	8002264 <__sflush_r+0x20>
 8002258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	dc02      	bgt.n	8002264 <__sflush_r+0x20>
 800225e:	2000      	movs	r0, #0
 8002260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002266:	2e00      	cmp	r6, #0
 8002268:	d0f9      	beq.n	800225e <__sflush_r+0x1a>
 800226a:	2300      	movs	r3, #0
 800226c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002270:	682f      	ldr	r7, [r5, #0]
 8002272:	6a21      	ldr	r1, [r4, #32]
 8002274:	602b      	str	r3, [r5, #0]
 8002276:	d032      	beq.n	80022de <__sflush_r+0x9a>
 8002278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	075a      	lsls	r2, r3, #29
 800227e:	d505      	bpl.n	800228c <__sflush_r+0x48>
 8002280:	6863      	ldr	r3, [r4, #4]
 8002282:	1ac0      	subs	r0, r0, r3
 8002284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002286:	b10b      	cbz	r3, 800228c <__sflush_r+0x48>
 8002288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800228a:	1ac0      	subs	r0, r0, r3
 800228c:	2300      	movs	r3, #0
 800228e:	4602      	mov	r2, r0
 8002290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002292:	6a21      	ldr	r1, [r4, #32]
 8002294:	4628      	mov	r0, r5
 8002296:	47b0      	blx	r6
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	d106      	bne.n	80022ac <__sflush_r+0x68>
 800229e:	6829      	ldr	r1, [r5, #0]
 80022a0:	291d      	cmp	r1, #29
 80022a2:	d848      	bhi.n	8002336 <__sflush_r+0xf2>
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <__sflush_r+0x108>)
 80022a6:	40ca      	lsrs	r2, r1
 80022a8:	07d6      	lsls	r6, r2, #31
 80022aa:	d544      	bpl.n	8002336 <__sflush_r+0xf2>
 80022ac:	2200      	movs	r2, #0
 80022ae:	6062      	str	r2, [r4, #4]
 80022b0:	04d9      	lsls	r1, r3, #19
 80022b2:	6922      	ldr	r2, [r4, #16]
 80022b4:	6022      	str	r2, [r4, #0]
 80022b6:	d504      	bpl.n	80022c2 <__sflush_r+0x7e>
 80022b8:	1c42      	adds	r2, r0, #1
 80022ba:	d101      	bne.n	80022c0 <__sflush_r+0x7c>
 80022bc:	682b      	ldr	r3, [r5, #0]
 80022be:	b903      	cbnz	r3, 80022c2 <__sflush_r+0x7e>
 80022c0:	6560      	str	r0, [r4, #84]	; 0x54
 80022c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022c4:	602f      	str	r7, [r5, #0]
 80022c6:	2900      	cmp	r1, #0
 80022c8:	d0c9      	beq.n	800225e <__sflush_r+0x1a>
 80022ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ce:	4299      	cmp	r1, r3
 80022d0:	d002      	beq.n	80022d8 <__sflush_r+0x94>
 80022d2:	4628      	mov	r0, r5
 80022d4:	f000 f99c 	bl	8002610 <_free_r>
 80022d8:	2000      	movs	r0, #0
 80022da:	6360      	str	r0, [r4, #52]	; 0x34
 80022dc:	e7c0      	b.n	8002260 <__sflush_r+0x1c>
 80022de:	2301      	movs	r3, #1
 80022e0:	4628      	mov	r0, r5
 80022e2:	47b0      	blx	r6
 80022e4:	1c41      	adds	r1, r0, #1
 80022e6:	d1c8      	bne.n	800227a <__sflush_r+0x36>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0c5      	beq.n	800227a <__sflush_r+0x36>
 80022ee:	2b1d      	cmp	r3, #29
 80022f0:	d001      	beq.n	80022f6 <__sflush_r+0xb2>
 80022f2:	2b16      	cmp	r3, #22
 80022f4:	d101      	bne.n	80022fa <__sflush_r+0xb6>
 80022f6:	602f      	str	r7, [r5, #0]
 80022f8:	e7b1      	b.n	800225e <__sflush_r+0x1a>
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	e7ad      	b.n	8002260 <__sflush_r+0x1c>
 8002304:	690f      	ldr	r7, [r1, #16]
 8002306:	2f00      	cmp	r7, #0
 8002308:	d0a9      	beq.n	800225e <__sflush_r+0x1a>
 800230a:	0793      	lsls	r3, r2, #30
 800230c:	680e      	ldr	r6, [r1, #0]
 800230e:	bf08      	it	eq
 8002310:	694b      	ldreq	r3, [r1, #20]
 8002312:	600f      	str	r7, [r1, #0]
 8002314:	bf18      	it	ne
 8002316:	2300      	movne	r3, #0
 8002318:	eba6 0807 	sub.w	r8, r6, r7
 800231c:	608b      	str	r3, [r1, #8]
 800231e:	f1b8 0f00 	cmp.w	r8, #0
 8002322:	dd9c      	ble.n	800225e <__sflush_r+0x1a>
 8002324:	4643      	mov	r3, r8
 8002326:	463a      	mov	r2, r7
 8002328:	6a21      	ldr	r1, [r4, #32]
 800232a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800232c:	4628      	mov	r0, r5
 800232e:	47b0      	blx	r6
 8002330:	2800      	cmp	r0, #0
 8002332:	dc06      	bgt.n	8002342 <__sflush_r+0xfe>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	e78e      	b.n	8002260 <__sflush_r+0x1c>
 8002342:	4407      	add	r7, r0
 8002344:	eba8 0800 	sub.w	r8, r8, r0
 8002348:	e7e9      	b.n	800231e <__sflush_r+0xda>
 800234a:	bf00      	nop
 800234c:	20400001 	.word	0x20400001

08002350 <_fflush_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	690b      	ldr	r3, [r1, #16]
 8002354:	4605      	mov	r5, r0
 8002356:	460c      	mov	r4, r1
 8002358:	b1db      	cbz	r3, 8002392 <_fflush_r+0x42>
 800235a:	b118      	cbz	r0, 8002364 <_fflush_r+0x14>
 800235c:	6983      	ldr	r3, [r0, #24]
 800235e:	b90b      	cbnz	r3, 8002364 <_fflush_r+0x14>
 8002360:	f000 f860 	bl	8002424 <__sinit>
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <_fflush_r+0x48>)
 8002366:	429c      	cmp	r4, r3
 8002368:	d109      	bne.n	800237e <_fflush_r+0x2e>
 800236a:	686c      	ldr	r4, [r5, #4]
 800236c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002370:	b17b      	cbz	r3, 8002392 <_fflush_r+0x42>
 8002372:	4621      	mov	r1, r4
 8002374:	4628      	mov	r0, r5
 8002376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800237a:	f7ff bf63 	b.w	8002244 <__sflush_r>
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_fflush_r+0x4c>)
 8002380:	429c      	cmp	r4, r3
 8002382:	d101      	bne.n	8002388 <_fflush_r+0x38>
 8002384:	68ac      	ldr	r4, [r5, #8]
 8002386:	e7f1      	b.n	800236c <_fflush_r+0x1c>
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <_fflush_r+0x50>)
 800238a:	429c      	cmp	r4, r3
 800238c:	bf08      	it	eq
 800238e:	68ec      	ldreq	r4, [r5, #12]
 8002390:	e7ec      	b.n	800236c <_fflush_r+0x1c>
 8002392:	2000      	movs	r0, #0
 8002394:	bd38      	pop	{r3, r4, r5, pc}
 8002396:	bf00      	nop
 8002398:	08002f00 	.word	0x08002f00
 800239c:	08002f20 	.word	0x08002f20
 80023a0:	08002ee0 	.word	0x08002ee0

080023a4 <std>:
 80023a4:	2300      	movs	r3, #0
 80023a6:	b510      	push	{r4, lr}
 80023a8:	4604      	mov	r4, r0
 80023aa:	e9c0 3300 	strd	r3, r3, [r0]
 80023ae:	6083      	str	r3, [r0, #8]
 80023b0:	8181      	strh	r1, [r0, #12]
 80023b2:	6643      	str	r3, [r0, #100]	; 0x64
 80023b4:	81c2      	strh	r2, [r0, #14]
 80023b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ba:	6183      	str	r3, [r0, #24]
 80023bc:	4619      	mov	r1, r3
 80023be:	2208      	movs	r2, #8
 80023c0:	305c      	adds	r0, #92	; 0x5c
 80023c2:	f7ff fdc7 	bl	8001f54 <memset>
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <std+0x38>)
 80023c8:	6263      	str	r3, [r4, #36]	; 0x24
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <std+0x3c>)
 80023cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <std+0x40>)
 80023d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <std+0x44>)
 80023d4:	6224      	str	r4, [r4, #32]
 80023d6:	6323      	str	r3, [r4, #48]	; 0x30
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	bf00      	nop
 80023dc:	08002d11 	.word	0x08002d11
 80023e0:	08002d33 	.word	0x08002d33
 80023e4:	08002d6b 	.word	0x08002d6b
 80023e8:	08002d8f 	.word	0x08002d8f

080023ec <_cleanup_r>:
 80023ec:	4901      	ldr	r1, [pc, #4]	; (80023f4 <_cleanup_r+0x8>)
 80023ee:	f000 b885 	b.w	80024fc <_fwalk_reent>
 80023f2:	bf00      	nop
 80023f4:	08002351 	.word	0x08002351

080023f8 <__sfmoreglue>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	1e4a      	subs	r2, r1, #1
 80023fc:	2568      	movs	r5, #104	; 0x68
 80023fe:	4355      	muls	r5, r2
 8002400:	460e      	mov	r6, r1
 8002402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002406:	f000 f951 	bl	80026ac <_malloc_r>
 800240a:	4604      	mov	r4, r0
 800240c:	b140      	cbz	r0, 8002420 <__sfmoreglue+0x28>
 800240e:	2100      	movs	r1, #0
 8002410:	e9c0 1600 	strd	r1, r6, [r0]
 8002414:	300c      	adds	r0, #12
 8002416:	60a0      	str	r0, [r4, #8]
 8002418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800241c:	f7ff fd9a 	bl	8001f54 <memset>
 8002420:	4620      	mov	r0, r4
 8002422:	bd70      	pop	{r4, r5, r6, pc}

08002424 <__sinit>:
 8002424:	6983      	ldr	r3, [r0, #24]
 8002426:	b510      	push	{r4, lr}
 8002428:	4604      	mov	r4, r0
 800242a:	bb33      	cbnz	r3, 800247a <__sinit+0x56>
 800242c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002430:	6503      	str	r3, [r0, #80]	; 0x50
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <__sinit+0x58>)
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <__sinit+0x5c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6282      	str	r2, [r0, #40]	; 0x28
 800243a:	4298      	cmp	r0, r3
 800243c:	bf04      	itt	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	6183      	streq	r3, [r0, #24]
 8002442:	f000 f81f 	bl	8002484 <__sfp>
 8002446:	6060      	str	r0, [r4, #4]
 8002448:	4620      	mov	r0, r4
 800244a:	f000 f81b 	bl	8002484 <__sfp>
 800244e:	60a0      	str	r0, [r4, #8]
 8002450:	4620      	mov	r0, r4
 8002452:	f000 f817 	bl	8002484 <__sfp>
 8002456:	2200      	movs	r2, #0
 8002458:	60e0      	str	r0, [r4, #12]
 800245a:	2104      	movs	r1, #4
 800245c:	6860      	ldr	r0, [r4, #4]
 800245e:	f7ff ffa1 	bl	80023a4 <std>
 8002462:	2201      	movs	r2, #1
 8002464:	2109      	movs	r1, #9
 8002466:	68a0      	ldr	r0, [r4, #8]
 8002468:	f7ff ff9c 	bl	80023a4 <std>
 800246c:	2202      	movs	r2, #2
 800246e:	2112      	movs	r1, #18
 8002470:	68e0      	ldr	r0, [r4, #12]
 8002472:	f7ff ff97 	bl	80023a4 <std>
 8002476:	2301      	movs	r3, #1
 8002478:	61a3      	str	r3, [r4, #24]
 800247a:	bd10      	pop	{r4, pc}
 800247c:	08002edc 	.word	0x08002edc
 8002480:	080023ed 	.word	0x080023ed

08002484 <__sfp>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <__sfp+0x70>)
 8002488:	681e      	ldr	r6, [r3, #0]
 800248a:	69b3      	ldr	r3, [r6, #24]
 800248c:	4607      	mov	r7, r0
 800248e:	b913      	cbnz	r3, 8002496 <__sfp+0x12>
 8002490:	4630      	mov	r0, r6
 8002492:	f7ff ffc7 	bl	8002424 <__sinit>
 8002496:	3648      	adds	r6, #72	; 0x48
 8002498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800249c:	3b01      	subs	r3, #1
 800249e:	d503      	bpl.n	80024a8 <__sfp+0x24>
 80024a0:	6833      	ldr	r3, [r6, #0]
 80024a2:	b133      	cbz	r3, 80024b2 <__sfp+0x2e>
 80024a4:	6836      	ldr	r6, [r6, #0]
 80024a6:	e7f7      	b.n	8002498 <__sfp+0x14>
 80024a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024ac:	b16d      	cbz	r5, 80024ca <__sfp+0x46>
 80024ae:	3468      	adds	r4, #104	; 0x68
 80024b0:	e7f4      	b.n	800249c <__sfp+0x18>
 80024b2:	2104      	movs	r1, #4
 80024b4:	4638      	mov	r0, r7
 80024b6:	f7ff ff9f 	bl	80023f8 <__sfmoreglue>
 80024ba:	6030      	str	r0, [r6, #0]
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1f1      	bne.n	80024a4 <__sfp+0x20>
 80024c0:	230c      	movs	r3, #12
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4604      	mov	r4, r0
 80024c6:	4620      	mov	r0, r4
 80024c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <__sfp+0x74>)
 80024cc:	6665      	str	r5, [r4, #100]	; 0x64
 80024ce:	e9c4 5500 	strd	r5, r5, [r4]
 80024d2:	60a5      	str	r5, [r4, #8]
 80024d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80024d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80024dc:	2208      	movs	r2, #8
 80024de:	4629      	mov	r1, r5
 80024e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024e4:	f7ff fd36 	bl	8001f54 <memset>
 80024e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024f0:	e7e9      	b.n	80024c6 <__sfp+0x42>
 80024f2:	bf00      	nop
 80024f4:	08002edc 	.word	0x08002edc
 80024f8:	ffff0001 	.word	0xffff0001

080024fc <_fwalk_reent>:
 80024fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002500:	4680      	mov	r8, r0
 8002502:	4689      	mov	r9, r1
 8002504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002508:	2600      	movs	r6, #0
 800250a:	b914      	cbnz	r4, 8002512 <_fwalk_reent+0x16>
 800250c:	4630      	mov	r0, r6
 800250e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002512:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002516:	3f01      	subs	r7, #1
 8002518:	d501      	bpl.n	800251e <_fwalk_reent+0x22>
 800251a:	6824      	ldr	r4, [r4, #0]
 800251c:	e7f5      	b.n	800250a <_fwalk_reent+0xe>
 800251e:	89ab      	ldrh	r3, [r5, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d907      	bls.n	8002534 <_fwalk_reent+0x38>
 8002524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002528:	3301      	adds	r3, #1
 800252a:	d003      	beq.n	8002534 <_fwalk_reent+0x38>
 800252c:	4629      	mov	r1, r5
 800252e:	4640      	mov	r0, r8
 8002530:	47c8      	blx	r9
 8002532:	4306      	orrs	r6, r0
 8002534:	3568      	adds	r5, #104	; 0x68
 8002536:	e7ee      	b.n	8002516 <_fwalk_reent+0x1a>

08002538 <__swhatbuf_r>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	460e      	mov	r6, r1
 800253c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002540:	2900      	cmp	r1, #0
 8002542:	b096      	sub	sp, #88	; 0x58
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	da07      	bge.n	800255a <__swhatbuf_r+0x22>
 800254a:	2300      	movs	r3, #0
 800254c:	602b      	str	r3, [r5, #0]
 800254e:	89b3      	ldrh	r3, [r6, #12]
 8002550:	061a      	lsls	r2, r3, #24
 8002552:	d410      	bmi.n	8002576 <__swhatbuf_r+0x3e>
 8002554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002558:	e00e      	b.n	8002578 <__swhatbuf_r+0x40>
 800255a:	466a      	mov	r2, sp
 800255c:	f000 fc3e 	bl	8002ddc <_fstat_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	dbf2      	blt.n	800254a <__swhatbuf_r+0x12>
 8002564:	9a01      	ldr	r2, [sp, #4]
 8002566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800256a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800256e:	425a      	negs	r2, r3
 8002570:	415a      	adcs	r2, r3
 8002572:	602a      	str	r2, [r5, #0]
 8002574:	e7ee      	b.n	8002554 <__swhatbuf_r+0x1c>
 8002576:	2340      	movs	r3, #64	; 0x40
 8002578:	2000      	movs	r0, #0
 800257a:	6023      	str	r3, [r4, #0]
 800257c:	b016      	add	sp, #88	; 0x58
 800257e:	bd70      	pop	{r4, r5, r6, pc}

08002580 <__smakebuf_r>:
 8002580:	898b      	ldrh	r3, [r1, #12]
 8002582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002584:	079d      	lsls	r5, r3, #30
 8002586:	4606      	mov	r6, r0
 8002588:	460c      	mov	r4, r1
 800258a:	d507      	bpl.n	800259c <__smakebuf_r+0x1c>
 800258c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	6123      	str	r3, [r4, #16]
 8002594:	2301      	movs	r3, #1
 8002596:	6163      	str	r3, [r4, #20]
 8002598:	b002      	add	sp, #8
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	ab01      	add	r3, sp, #4
 800259e:	466a      	mov	r2, sp
 80025a0:	f7ff ffca 	bl	8002538 <__swhatbuf_r>
 80025a4:	9900      	ldr	r1, [sp, #0]
 80025a6:	4605      	mov	r5, r0
 80025a8:	4630      	mov	r0, r6
 80025aa:	f000 f87f 	bl	80026ac <_malloc_r>
 80025ae:	b948      	cbnz	r0, 80025c4 <__smakebuf_r+0x44>
 80025b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025b4:	059a      	lsls	r2, r3, #22
 80025b6:	d4ef      	bmi.n	8002598 <__smakebuf_r+0x18>
 80025b8:	f023 0303 	bic.w	r3, r3, #3
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	81a3      	strh	r3, [r4, #12]
 80025c2:	e7e3      	b.n	800258c <__smakebuf_r+0xc>
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <__smakebuf_r+0x7c>)
 80025c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	6020      	str	r0, [r4, #0]
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	81a3      	strh	r3, [r4, #12]
 80025d2:	9b00      	ldr	r3, [sp, #0]
 80025d4:	6163      	str	r3, [r4, #20]
 80025d6:	9b01      	ldr	r3, [sp, #4]
 80025d8:	6120      	str	r0, [r4, #16]
 80025da:	b15b      	cbz	r3, 80025f4 <__smakebuf_r+0x74>
 80025dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025e0:	4630      	mov	r0, r6
 80025e2:	f000 fc0d 	bl	8002e00 <_isatty_r>
 80025e6:	b128      	cbz	r0, 80025f4 <__smakebuf_r+0x74>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	81a3      	strh	r3, [r4, #12]
 80025f4:	89a3      	ldrh	r3, [r4, #12]
 80025f6:	431d      	orrs	r5, r3
 80025f8:	81a5      	strh	r5, [r4, #12]
 80025fa:	e7cd      	b.n	8002598 <__smakebuf_r+0x18>
 80025fc:	080023ed 	.word	0x080023ed

08002600 <malloc>:
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <malloc+0xc>)
 8002602:	4601      	mov	r1, r0
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	f000 b851 	b.w	80026ac <_malloc_r>
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c

08002610 <_free_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4605      	mov	r5, r0
 8002614:	2900      	cmp	r1, #0
 8002616:	d045      	beq.n	80026a4 <_free_r+0x94>
 8002618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800261c:	1f0c      	subs	r4, r1, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	bfb8      	it	lt
 8002622:	18e4      	addlt	r4, r4, r3
 8002624:	f000 fc0e 	bl	8002e44 <__malloc_lock>
 8002628:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <_free_r+0x98>)
 800262a:	6813      	ldr	r3, [r2, #0]
 800262c:	4610      	mov	r0, r2
 800262e:	b933      	cbnz	r3, 800263e <_free_r+0x2e>
 8002630:	6063      	str	r3, [r4, #4]
 8002632:	6014      	str	r4, [r2, #0]
 8002634:	4628      	mov	r0, r5
 8002636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800263a:	f000 bc04 	b.w	8002e46 <__malloc_unlock>
 800263e:	42a3      	cmp	r3, r4
 8002640:	d90c      	bls.n	800265c <_free_r+0x4c>
 8002642:	6821      	ldr	r1, [r4, #0]
 8002644:	1862      	adds	r2, r4, r1
 8002646:	4293      	cmp	r3, r2
 8002648:	bf04      	itt	eq
 800264a:	681a      	ldreq	r2, [r3, #0]
 800264c:	685b      	ldreq	r3, [r3, #4]
 800264e:	6063      	str	r3, [r4, #4]
 8002650:	bf04      	itt	eq
 8002652:	1852      	addeq	r2, r2, r1
 8002654:	6022      	streq	r2, [r4, #0]
 8002656:	6004      	str	r4, [r0, #0]
 8002658:	e7ec      	b.n	8002634 <_free_r+0x24>
 800265a:	4613      	mov	r3, r2
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	b10a      	cbz	r2, 8002664 <_free_r+0x54>
 8002660:	42a2      	cmp	r2, r4
 8002662:	d9fa      	bls.n	800265a <_free_r+0x4a>
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	1858      	adds	r0, r3, r1
 8002668:	42a0      	cmp	r0, r4
 800266a:	d10b      	bne.n	8002684 <_free_r+0x74>
 800266c:	6820      	ldr	r0, [r4, #0]
 800266e:	4401      	add	r1, r0
 8002670:	1858      	adds	r0, r3, r1
 8002672:	4282      	cmp	r2, r0
 8002674:	6019      	str	r1, [r3, #0]
 8002676:	d1dd      	bne.n	8002634 <_free_r+0x24>
 8002678:	6810      	ldr	r0, [r2, #0]
 800267a:	6852      	ldr	r2, [r2, #4]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	4401      	add	r1, r0
 8002680:	6019      	str	r1, [r3, #0]
 8002682:	e7d7      	b.n	8002634 <_free_r+0x24>
 8002684:	d902      	bls.n	800268c <_free_r+0x7c>
 8002686:	230c      	movs	r3, #12
 8002688:	602b      	str	r3, [r5, #0]
 800268a:	e7d3      	b.n	8002634 <_free_r+0x24>
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	1821      	adds	r1, r4, r0
 8002690:	428a      	cmp	r2, r1
 8002692:	bf04      	itt	eq
 8002694:	6811      	ldreq	r1, [r2, #0]
 8002696:	6852      	ldreq	r2, [r2, #4]
 8002698:	6062      	str	r2, [r4, #4]
 800269a:	bf04      	itt	eq
 800269c:	1809      	addeq	r1, r1, r0
 800269e:	6021      	streq	r1, [r4, #0]
 80026a0:	605c      	str	r4, [r3, #4]
 80026a2:	e7c7      	b.n	8002634 <_free_r+0x24>
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
 80026a6:	bf00      	nop
 80026a8:	20000094 	.word	0x20000094

080026ac <_malloc_r>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	1ccd      	adds	r5, r1, #3
 80026b0:	f025 0503 	bic.w	r5, r5, #3
 80026b4:	3508      	adds	r5, #8
 80026b6:	2d0c      	cmp	r5, #12
 80026b8:	bf38      	it	cc
 80026ba:	250c      	movcc	r5, #12
 80026bc:	2d00      	cmp	r5, #0
 80026be:	4606      	mov	r6, r0
 80026c0:	db01      	blt.n	80026c6 <_malloc_r+0x1a>
 80026c2:	42a9      	cmp	r1, r5
 80026c4:	d903      	bls.n	80026ce <_malloc_r+0x22>
 80026c6:	230c      	movs	r3, #12
 80026c8:	6033      	str	r3, [r6, #0]
 80026ca:	2000      	movs	r0, #0
 80026cc:	bd70      	pop	{r4, r5, r6, pc}
 80026ce:	f000 fbb9 	bl	8002e44 <__malloc_lock>
 80026d2:	4a21      	ldr	r2, [pc, #132]	; (8002758 <_malloc_r+0xac>)
 80026d4:	6814      	ldr	r4, [r2, #0]
 80026d6:	4621      	mov	r1, r4
 80026d8:	b991      	cbnz	r1, 8002700 <_malloc_r+0x54>
 80026da:	4c20      	ldr	r4, [pc, #128]	; (800275c <_malloc_r+0xb0>)
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	b91b      	cbnz	r3, 80026e8 <_malloc_r+0x3c>
 80026e0:	4630      	mov	r0, r6
 80026e2:	f000 fb05 	bl	8002cf0 <_sbrk_r>
 80026e6:	6020      	str	r0, [r4, #0]
 80026e8:	4629      	mov	r1, r5
 80026ea:	4630      	mov	r0, r6
 80026ec:	f000 fb00 	bl	8002cf0 <_sbrk_r>
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	d124      	bne.n	800273e <_malloc_r+0x92>
 80026f4:	230c      	movs	r3, #12
 80026f6:	6033      	str	r3, [r6, #0]
 80026f8:	4630      	mov	r0, r6
 80026fa:	f000 fba4 	bl	8002e46 <__malloc_unlock>
 80026fe:	e7e4      	b.n	80026ca <_malloc_r+0x1e>
 8002700:	680b      	ldr	r3, [r1, #0]
 8002702:	1b5b      	subs	r3, r3, r5
 8002704:	d418      	bmi.n	8002738 <_malloc_r+0x8c>
 8002706:	2b0b      	cmp	r3, #11
 8002708:	d90f      	bls.n	800272a <_malloc_r+0x7e>
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	50cd      	str	r5, [r1, r3]
 800270e:	18cc      	adds	r4, r1, r3
 8002710:	4630      	mov	r0, r6
 8002712:	f000 fb98 	bl	8002e46 <__malloc_unlock>
 8002716:	f104 000b 	add.w	r0, r4, #11
 800271a:	1d23      	adds	r3, r4, #4
 800271c:	f020 0007 	bic.w	r0, r0, #7
 8002720:	1ac3      	subs	r3, r0, r3
 8002722:	d0d3      	beq.n	80026cc <_malloc_r+0x20>
 8002724:	425a      	negs	r2, r3
 8002726:	50e2      	str	r2, [r4, r3]
 8002728:	e7d0      	b.n	80026cc <_malloc_r+0x20>
 800272a:	428c      	cmp	r4, r1
 800272c:	684b      	ldr	r3, [r1, #4]
 800272e:	bf16      	itet	ne
 8002730:	6063      	strne	r3, [r4, #4]
 8002732:	6013      	streq	r3, [r2, #0]
 8002734:	460c      	movne	r4, r1
 8002736:	e7eb      	b.n	8002710 <_malloc_r+0x64>
 8002738:	460c      	mov	r4, r1
 800273a:	6849      	ldr	r1, [r1, #4]
 800273c:	e7cc      	b.n	80026d8 <_malloc_r+0x2c>
 800273e:	1cc4      	adds	r4, r0, #3
 8002740:	f024 0403 	bic.w	r4, r4, #3
 8002744:	42a0      	cmp	r0, r4
 8002746:	d005      	beq.n	8002754 <_malloc_r+0xa8>
 8002748:	1a21      	subs	r1, r4, r0
 800274a:	4630      	mov	r0, r6
 800274c:	f000 fad0 	bl	8002cf0 <_sbrk_r>
 8002750:	3001      	adds	r0, #1
 8002752:	d0cf      	beq.n	80026f4 <_malloc_r+0x48>
 8002754:	6025      	str	r5, [r4, #0]
 8002756:	e7db      	b.n	8002710 <_malloc_r+0x64>
 8002758:	20000094 	.word	0x20000094
 800275c:	20000098 	.word	0x20000098

08002760 <__sfputc_r>:
 8002760:	6893      	ldr	r3, [r2, #8]
 8002762:	3b01      	subs	r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	b410      	push	{r4}
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	da08      	bge.n	800277e <__sfputc_r+0x1e>
 800276c:	6994      	ldr	r4, [r2, #24]
 800276e:	42a3      	cmp	r3, r4
 8002770:	db01      	blt.n	8002776 <__sfputc_r+0x16>
 8002772:	290a      	cmp	r1, #10
 8002774:	d103      	bne.n	800277e <__sfputc_r+0x1e>
 8002776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800277a:	f7ff bca3 	b.w	80020c4 <__swbuf_r>
 800277e:	6813      	ldr	r3, [r2, #0]
 8002780:	1c58      	adds	r0, r3, #1
 8002782:	6010      	str	r0, [r2, #0]
 8002784:	7019      	strb	r1, [r3, #0]
 8002786:	4608      	mov	r0, r1
 8002788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800278c:	4770      	bx	lr

0800278e <__sfputs_r>:
 800278e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002790:	4606      	mov	r6, r0
 8002792:	460f      	mov	r7, r1
 8002794:	4614      	mov	r4, r2
 8002796:	18d5      	adds	r5, r2, r3
 8002798:	42ac      	cmp	r4, r5
 800279a:	d101      	bne.n	80027a0 <__sfputs_r+0x12>
 800279c:	2000      	movs	r0, #0
 800279e:	e007      	b.n	80027b0 <__sfputs_r+0x22>
 80027a0:	463a      	mov	r2, r7
 80027a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027a6:	4630      	mov	r0, r6
 80027a8:	f7ff ffda 	bl	8002760 <__sfputc_r>
 80027ac:	1c43      	adds	r3, r0, #1
 80027ae:	d1f3      	bne.n	8002798 <__sfputs_r+0xa>
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027b4 <_vfiprintf_r>:
 80027b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b8:	460c      	mov	r4, r1
 80027ba:	b09d      	sub	sp, #116	; 0x74
 80027bc:	4617      	mov	r7, r2
 80027be:	461d      	mov	r5, r3
 80027c0:	4606      	mov	r6, r0
 80027c2:	b118      	cbz	r0, 80027cc <_vfiprintf_r+0x18>
 80027c4:	6983      	ldr	r3, [r0, #24]
 80027c6:	b90b      	cbnz	r3, 80027cc <_vfiprintf_r+0x18>
 80027c8:	f7ff fe2c 	bl	8002424 <__sinit>
 80027cc:	4b7c      	ldr	r3, [pc, #496]	; (80029c0 <_vfiprintf_r+0x20c>)
 80027ce:	429c      	cmp	r4, r3
 80027d0:	d158      	bne.n	8002884 <_vfiprintf_r+0xd0>
 80027d2:	6874      	ldr	r4, [r6, #4]
 80027d4:	89a3      	ldrh	r3, [r4, #12]
 80027d6:	0718      	lsls	r0, r3, #28
 80027d8:	d55e      	bpl.n	8002898 <_vfiprintf_r+0xe4>
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05b      	beq.n	8002898 <_vfiprintf_r+0xe4>
 80027e0:	2300      	movs	r3, #0
 80027e2:	9309      	str	r3, [sp, #36]	; 0x24
 80027e4:	2320      	movs	r3, #32
 80027e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ea:	2330      	movs	r3, #48	; 0x30
 80027ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027f0:	9503      	str	r5, [sp, #12]
 80027f2:	f04f 0b01 	mov.w	fp, #1
 80027f6:	46b8      	mov	r8, r7
 80027f8:	4645      	mov	r5, r8
 80027fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027fe:	b10b      	cbz	r3, 8002804 <_vfiprintf_r+0x50>
 8002800:	2b25      	cmp	r3, #37	; 0x25
 8002802:	d154      	bne.n	80028ae <_vfiprintf_r+0xfa>
 8002804:	ebb8 0a07 	subs.w	sl, r8, r7
 8002808:	d00b      	beq.n	8002822 <_vfiprintf_r+0x6e>
 800280a:	4653      	mov	r3, sl
 800280c:	463a      	mov	r2, r7
 800280e:	4621      	mov	r1, r4
 8002810:	4630      	mov	r0, r6
 8002812:	f7ff ffbc 	bl	800278e <__sfputs_r>
 8002816:	3001      	adds	r0, #1
 8002818:	f000 80c2 	beq.w	80029a0 <_vfiprintf_r+0x1ec>
 800281c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800281e:	4453      	add	r3, sl
 8002820:	9309      	str	r3, [sp, #36]	; 0x24
 8002822:	f898 3000 	ldrb.w	r3, [r8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80ba 	beq.w	80029a0 <_vfiprintf_r+0x1ec>
 800282c:	2300      	movs	r3, #0
 800282e:	f04f 32ff 	mov.w	r2, #4294967295
 8002832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002836:	9304      	str	r3, [sp, #16]
 8002838:	9307      	str	r3, [sp, #28]
 800283a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800283e:	931a      	str	r3, [sp, #104]	; 0x68
 8002840:	46a8      	mov	r8, r5
 8002842:	2205      	movs	r2, #5
 8002844:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002848:	485e      	ldr	r0, [pc, #376]	; (80029c4 <_vfiprintf_r+0x210>)
 800284a:	f7fd fcc9 	bl	80001e0 <memchr>
 800284e:	9b04      	ldr	r3, [sp, #16]
 8002850:	bb78      	cbnz	r0, 80028b2 <_vfiprintf_r+0xfe>
 8002852:	06d9      	lsls	r1, r3, #27
 8002854:	bf44      	itt	mi
 8002856:	2220      	movmi	r2, #32
 8002858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800285c:	071a      	lsls	r2, r3, #28
 800285e:	bf44      	itt	mi
 8002860:	222b      	movmi	r2, #43	; 0x2b
 8002862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002866:	782a      	ldrb	r2, [r5, #0]
 8002868:	2a2a      	cmp	r2, #42	; 0x2a
 800286a:	d02a      	beq.n	80028c2 <_vfiprintf_r+0x10e>
 800286c:	9a07      	ldr	r2, [sp, #28]
 800286e:	46a8      	mov	r8, r5
 8002870:	2000      	movs	r0, #0
 8002872:	250a      	movs	r5, #10
 8002874:	4641      	mov	r1, r8
 8002876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800287a:	3b30      	subs	r3, #48	; 0x30
 800287c:	2b09      	cmp	r3, #9
 800287e:	d969      	bls.n	8002954 <_vfiprintf_r+0x1a0>
 8002880:	b360      	cbz	r0, 80028dc <_vfiprintf_r+0x128>
 8002882:	e024      	b.n	80028ce <_vfiprintf_r+0x11a>
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <_vfiprintf_r+0x214>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d101      	bne.n	800288e <_vfiprintf_r+0xda>
 800288a:	68b4      	ldr	r4, [r6, #8]
 800288c:	e7a2      	b.n	80027d4 <_vfiprintf_r+0x20>
 800288e:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <_vfiprintf_r+0x218>)
 8002890:	429c      	cmp	r4, r3
 8002892:	bf08      	it	eq
 8002894:	68f4      	ldreq	r4, [r6, #12]
 8002896:	e79d      	b.n	80027d4 <_vfiprintf_r+0x20>
 8002898:	4621      	mov	r1, r4
 800289a:	4630      	mov	r0, r6
 800289c:	f7ff fc64 	bl	8002168 <__swsetup_r>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d09d      	beq.n	80027e0 <_vfiprintf_r+0x2c>
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	b01d      	add	sp, #116	; 0x74
 80028aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ae:	46a8      	mov	r8, r5
 80028b0:	e7a2      	b.n	80027f8 <_vfiprintf_r+0x44>
 80028b2:	4a44      	ldr	r2, [pc, #272]	; (80029c4 <_vfiprintf_r+0x210>)
 80028b4:	1a80      	subs	r0, r0, r2
 80028b6:	fa0b f000 	lsl.w	r0, fp, r0
 80028ba:	4318      	orrs	r0, r3
 80028bc:	9004      	str	r0, [sp, #16]
 80028be:	4645      	mov	r5, r8
 80028c0:	e7be      	b.n	8002840 <_vfiprintf_r+0x8c>
 80028c2:	9a03      	ldr	r2, [sp, #12]
 80028c4:	1d11      	adds	r1, r2, #4
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	9103      	str	r1, [sp, #12]
 80028ca:	2a00      	cmp	r2, #0
 80028cc:	db01      	blt.n	80028d2 <_vfiprintf_r+0x11e>
 80028ce:	9207      	str	r2, [sp, #28]
 80028d0:	e004      	b.n	80028dc <_vfiprintf_r+0x128>
 80028d2:	4252      	negs	r2, r2
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	9207      	str	r2, [sp, #28]
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	f898 3000 	ldrb.w	r3, [r8]
 80028e0:	2b2e      	cmp	r3, #46	; 0x2e
 80028e2:	d10e      	bne.n	8002902 <_vfiprintf_r+0x14e>
 80028e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80028e8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ea:	d138      	bne.n	800295e <_vfiprintf_r+0x1aa>
 80028ec:	9b03      	ldr	r3, [sp, #12]
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	9203      	str	r2, [sp, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bfb8      	it	lt
 80028f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80028fc:	f108 0802 	add.w	r8, r8, #2
 8002900:	9305      	str	r3, [sp, #20]
 8002902:	4d33      	ldr	r5, [pc, #204]	; (80029d0 <_vfiprintf_r+0x21c>)
 8002904:	f898 1000 	ldrb.w	r1, [r8]
 8002908:	2203      	movs	r2, #3
 800290a:	4628      	mov	r0, r5
 800290c:	f7fd fc68 	bl	80001e0 <memchr>
 8002910:	b140      	cbz	r0, 8002924 <_vfiprintf_r+0x170>
 8002912:	2340      	movs	r3, #64	; 0x40
 8002914:	1b40      	subs	r0, r0, r5
 8002916:	fa03 f000 	lsl.w	r0, r3, r0
 800291a:	9b04      	ldr	r3, [sp, #16]
 800291c:	4303      	orrs	r3, r0
 800291e:	f108 0801 	add.w	r8, r8, #1
 8002922:	9304      	str	r3, [sp, #16]
 8002924:	f898 1000 	ldrb.w	r1, [r8]
 8002928:	482a      	ldr	r0, [pc, #168]	; (80029d4 <_vfiprintf_r+0x220>)
 800292a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800292e:	2206      	movs	r2, #6
 8002930:	f108 0701 	add.w	r7, r8, #1
 8002934:	f7fd fc54 	bl	80001e0 <memchr>
 8002938:	2800      	cmp	r0, #0
 800293a:	d037      	beq.n	80029ac <_vfiprintf_r+0x1f8>
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <_vfiprintf_r+0x224>)
 800293e:	bb1b      	cbnz	r3, 8002988 <_vfiprintf_r+0x1d4>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	3307      	adds	r3, #7
 8002944:	f023 0307 	bic.w	r3, r3, #7
 8002948:	3308      	adds	r3, #8
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294e:	444b      	add	r3, r9
 8002950:	9309      	str	r3, [sp, #36]	; 0x24
 8002952:	e750      	b.n	80027f6 <_vfiprintf_r+0x42>
 8002954:	fb05 3202 	mla	r2, r5, r2, r3
 8002958:	2001      	movs	r0, #1
 800295a:	4688      	mov	r8, r1
 800295c:	e78a      	b.n	8002874 <_vfiprintf_r+0xc0>
 800295e:	2300      	movs	r3, #0
 8002960:	f108 0801 	add.w	r8, r8, #1
 8002964:	9305      	str	r3, [sp, #20]
 8002966:	4619      	mov	r1, r3
 8002968:	250a      	movs	r5, #10
 800296a:	4640      	mov	r0, r8
 800296c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002970:	3a30      	subs	r2, #48	; 0x30
 8002972:	2a09      	cmp	r2, #9
 8002974:	d903      	bls.n	800297e <_vfiprintf_r+0x1ca>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0c3      	beq.n	8002902 <_vfiprintf_r+0x14e>
 800297a:	9105      	str	r1, [sp, #20]
 800297c:	e7c1      	b.n	8002902 <_vfiprintf_r+0x14e>
 800297e:	fb05 2101 	mla	r1, r5, r1, r2
 8002982:	2301      	movs	r3, #1
 8002984:	4680      	mov	r8, r0
 8002986:	e7f0      	b.n	800296a <_vfiprintf_r+0x1b6>
 8002988:	ab03      	add	r3, sp, #12
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4622      	mov	r2, r4
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <_vfiprintf_r+0x228>)
 8002990:	a904      	add	r1, sp, #16
 8002992:	4630      	mov	r0, r6
 8002994:	f3af 8000 	nop.w
 8002998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800299c:	4681      	mov	r9, r0
 800299e:	d1d5      	bne.n	800294c <_vfiprintf_r+0x198>
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	065b      	lsls	r3, r3, #25
 80029a4:	f53f af7e 	bmi.w	80028a4 <_vfiprintf_r+0xf0>
 80029a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029aa:	e77d      	b.n	80028a8 <_vfiprintf_r+0xf4>
 80029ac:	ab03      	add	r3, sp, #12
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4622      	mov	r2, r4
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <_vfiprintf_r+0x228>)
 80029b4:	a904      	add	r1, sp, #16
 80029b6:	4630      	mov	r0, r6
 80029b8:	f000 f888 	bl	8002acc <_printf_i>
 80029bc:	e7ec      	b.n	8002998 <_vfiprintf_r+0x1e4>
 80029be:	bf00      	nop
 80029c0:	08002f00 	.word	0x08002f00
 80029c4:	08002f40 	.word	0x08002f40
 80029c8:	08002f20 	.word	0x08002f20
 80029cc:	08002ee0 	.word	0x08002ee0
 80029d0:	08002f46 	.word	0x08002f46
 80029d4:	08002f4a 	.word	0x08002f4a
 80029d8:	00000000 	.word	0x00000000
 80029dc:	0800278f 	.word	0x0800278f

080029e0 <_printf_common>:
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	4691      	mov	r9, r2
 80029e6:	461f      	mov	r7, r3
 80029e8:	688a      	ldr	r2, [r1, #8]
 80029ea:	690b      	ldr	r3, [r1, #16]
 80029ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bfb8      	it	lt
 80029f4:	4613      	movlt	r3, r2
 80029f6:	f8c9 3000 	str.w	r3, [r9]
 80029fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029fe:	4606      	mov	r6, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	b112      	cbz	r2, 8002a0a <_printf_common+0x2a>
 8002a04:	3301      	adds	r3, #1
 8002a06:	f8c9 3000 	str.w	r3, [r9]
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	0699      	lsls	r1, r3, #26
 8002a0e:	bf42      	ittt	mi
 8002a10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a14:	3302      	addmi	r3, #2
 8002a16:	f8c9 3000 	strmi.w	r3, [r9]
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	f015 0506 	ands.w	r5, r5, #6
 8002a20:	d107      	bne.n	8002a32 <_printf_common+0x52>
 8002a22:	f104 0a19 	add.w	sl, r4, #25
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	f8d9 2000 	ldr.w	r2, [r9]
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	42ab      	cmp	r3, r5
 8002a30:	dc28      	bgt.n	8002a84 <_printf_common+0xa4>
 8002a32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	3300      	adds	r3, #0
 8002a3a:	bf18      	it	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	0692      	lsls	r2, r2, #26
 8002a40:	d42d      	bmi.n	8002a9e <_printf_common+0xbe>
 8002a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a46:	4639      	mov	r1, r7
 8002a48:	4630      	mov	r0, r6
 8002a4a:	47c0      	blx	r8
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d020      	beq.n	8002a92 <_printf_common+0xb2>
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	68e5      	ldr	r5, [r4, #12]
 8002a54:	f8d9 2000 	ldr.w	r2, [r9]
 8002a58:	f003 0306 	and.w	r3, r3, #6
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	bf08      	it	eq
 8002a60:	1aad      	subeq	r5, r5, r2
 8002a62:	68a3      	ldr	r3, [r4, #8]
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	bf0c      	ite	eq
 8002a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a6c:	2500      	movne	r5, #0
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	bfc4      	itt	gt
 8002a72:	1a9b      	subgt	r3, r3, r2
 8002a74:	18ed      	addgt	r5, r5, r3
 8002a76:	f04f 0900 	mov.w	r9, #0
 8002a7a:	341a      	adds	r4, #26
 8002a7c:	454d      	cmp	r5, r9
 8002a7e:	d11a      	bne.n	8002ab6 <_printf_common+0xd6>
 8002a80:	2000      	movs	r0, #0
 8002a82:	e008      	b.n	8002a96 <_printf_common+0xb6>
 8002a84:	2301      	movs	r3, #1
 8002a86:	4652      	mov	r2, sl
 8002a88:	4639      	mov	r1, r7
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	47c0      	blx	r8
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d103      	bne.n	8002a9a <_printf_common+0xba>
 8002a92:	f04f 30ff 	mov.w	r0, #4294967295
 8002a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a9a:	3501      	adds	r5, #1
 8002a9c:	e7c3      	b.n	8002a26 <_printf_common+0x46>
 8002a9e:	18e1      	adds	r1, r4, r3
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	2030      	movs	r0, #48	; 0x30
 8002aa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa8:	4422      	add	r2, r4
 8002aaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	e7c5      	b.n	8002a42 <_printf_common+0x62>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4622      	mov	r2, r4
 8002aba:	4639      	mov	r1, r7
 8002abc:	4630      	mov	r0, r6
 8002abe:	47c0      	blx	r8
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d0e6      	beq.n	8002a92 <_printf_common+0xb2>
 8002ac4:	f109 0901 	add.w	r9, r9, #1
 8002ac8:	e7d8      	b.n	8002a7c <_printf_common+0x9c>
	...

08002acc <_printf_i>:
 8002acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ad0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ad4:	460c      	mov	r4, r1
 8002ad6:	7e09      	ldrb	r1, [r1, #24]
 8002ad8:	b085      	sub	sp, #20
 8002ada:	296e      	cmp	r1, #110	; 0x6e
 8002adc:	4617      	mov	r7, r2
 8002ade:	4606      	mov	r6, r0
 8002ae0:	4698      	mov	r8, r3
 8002ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ae4:	f000 80b3 	beq.w	8002c4e <_printf_i+0x182>
 8002ae8:	d822      	bhi.n	8002b30 <_printf_i+0x64>
 8002aea:	2963      	cmp	r1, #99	; 0x63
 8002aec:	d036      	beq.n	8002b5c <_printf_i+0x90>
 8002aee:	d80a      	bhi.n	8002b06 <_printf_i+0x3a>
 8002af0:	2900      	cmp	r1, #0
 8002af2:	f000 80b9 	beq.w	8002c68 <_printf_i+0x19c>
 8002af6:	2958      	cmp	r1, #88	; 0x58
 8002af8:	f000 8083 	beq.w	8002c02 <_printf_i+0x136>
 8002afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b04:	e032      	b.n	8002b6c <_printf_i+0xa0>
 8002b06:	2964      	cmp	r1, #100	; 0x64
 8002b08:	d001      	beq.n	8002b0e <_printf_i+0x42>
 8002b0a:	2969      	cmp	r1, #105	; 0x69
 8002b0c:	d1f6      	bne.n	8002afc <_printf_i+0x30>
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	0605      	lsls	r5, r0, #24
 8002b14:	f103 0104 	add.w	r1, r3, #4
 8002b18:	d52a      	bpl.n	8002b70 <_printf_i+0xa4>
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6011      	str	r1, [r2, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da03      	bge.n	8002b2a <_printf_i+0x5e>
 8002b22:	222d      	movs	r2, #45	; 0x2d
 8002b24:	425b      	negs	r3, r3
 8002b26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b2a:	486f      	ldr	r0, [pc, #444]	; (8002ce8 <_printf_i+0x21c>)
 8002b2c:	220a      	movs	r2, #10
 8002b2e:	e039      	b.n	8002ba4 <_printf_i+0xd8>
 8002b30:	2973      	cmp	r1, #115	; 0x73
 8002b32:	f000 809d 	beq.w	8002c70 <_printf_i+0x1a4>
 8002b36:	d808      	bhi.n	8002b4a <_printf_i+0x7e>
 8002b38:	296f      	cmp	r1, #111	; 0x6f
 8002b3a:	d020      	beq.n	8002b7e <_printf_i+0xb2>
 8002b3c:	2970      	cmp	r1, #112	; 0x70
 8002b3e:	d1dd      	bne.n	8002afc <_printf_i+0x30>
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f043 0320 	orr.w	r3, r3, #32
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	e003      	b.n	8002b52 <_printf_i+0x86>
 8002b4a:	2975      	cmp	r1, #117	; 0x75
 8002b4c:	d017      	beq.n	8002b7e <_printf_i+0xb2>
 8002b4e:	2978      	cmp	r1, #120	; 0x78
 8002b50:	d1d4      	bne.n	8002afc <_printf_i+0x30>
 8002b52:	2378      	movs	r3, #120	; 0x78
 8002b54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b58:	4864      	ldr	r0, [pc, #400]	; (8002cec <_printf_i+0x220>)
 8002b5a:	e055      	b.n	8002c08 <_printf_i+0x13c>
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	1d19      	adds	r1, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6011      	str	r1, [r2, #0]
 8002b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e08c      	b.n	8002c8a <_printf_i+0x1be>
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6011      	str	r1, [r2, #0]
 8002b74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b78:	bf18      	it	ne
 8002b7a:	b21b      	sxthne	r3, r3
 8002b7c:	e7cf      	b.n	8002b1e <_printf_i+0x52>
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	6825      	ldr	r5, [r4, #0]
 8002b82:	1d18      	adds	r0, r3, #4
 8002b84:	6010      	str	r0, [r2, #0]
 8002b86:	0628      	lsls	r0, r5, #24
 8002b88:	d501      	bpl.n	8002b8e <_printf_i+0xc2>
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e002      	b.n	8002b94 <_printf_i+0xc8>
 8002b8e:	0668      	lsls	r0, r5, #25
 8002b90:	d5fb      	bpl.n	8002b8a <_printf_i+0xbe>
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	4854      	ldr	r0, [pc, #336]	; (8002ce8 <_printf_i+0x21c>)
 8002b96:	296f      	cmp	r1, #111	; 0x6f
 8002b98:	bf14      	ite	ne
 8002b9a:	220a      	movne	r2, #10
 8002b9c:	2208      	moveq	r2, #8
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ba4:	6865      	ldr	r5, [r4, #4]
 8002ba6:	60a5      	str	r5, [r4, #8]
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	f2c0 8095 	blt.w	8002cd8 <_printf_i+0x20c>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	f021 0104 	bic.w	r1, r1, #4
 8002bb4:	6021      	str	r1, [r4, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d13d      	bne.n	8002c36 <_printf_i+0x16a>
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	f040 808e 	bne.w	8002cdc <_printf_i+0x210>
 8002bc0:	4665      	mov	r5, ip
 8002bc2:	2a08      	cmp	r2, #8
 8002bc4:	d10b      	bne.n	8002bde <_printf_i+0x112>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	07db      	lsls	r3, r3, #31
 8002bca:	d508      	bpl.n	8002bde <_printf_i+0x112>
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	6862      	ldr	r2, [r4, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	bfde      	ittt	le
 8002bd4:	2330      	movle	r3, #48	; 0x30
 8002bd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bde:	ebac 0305 	sub.w	r3, ip, r5
 8002be2:	6123      	str	r3, [r4, #16]
 8002be4:	f8cd 8000 	str.w	r8, [sp]
 8002be8:	463b      	mov	r3, r7
 8002bea:	aa03      	add	r2, sp, #12
 8002bec:	4621      	mov	r1, r4
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f7ff fef6 	bl	80029e0 <_printf_common>
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d14d      	bne.n	8002c94 <_printf_i+0x1c8>
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	b005      	add	sp, #20
 8002bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c02:	4839      	ldr	r0, [pc, #228]	; (8002ce8 <_printf_i+0x21c>)
 8002c04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	6821      	ldr	r1, [r4, #0]
 8002c0c:	1d1d      	adds	r5, r3, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6015      	str	r5, [r2, #0]
 8002c12:	060a      	lsls	r2, r1, #24
 8002c14:	d50b      	bpl.n	8002c2e <_printf_i+0x162>
 8002c16:	07ca      	lsls	r2, r1, #31
 8002c18:	bf44      	itt	mi
 8002c1a:	f041 0120 	orrmi.w	r1, r1, #32
 8002c1e:	6021      	strmi	r1, [r4, #0]
 8002c20:	b91b      	cbnz	r3, 8002c2a <_printf_i+0x15e>
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	f022 0220 	bic.w	r2, r2, #32
 8002c28:	6022      	str	r2, [r4, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	e7b7      	b.n	8002b9e <_printf_i+0xd2>
 8002c2e:	064d      	lsls	r5, r1, #25
 8002c30:	bf48      	it	mi
 8002c32:	b29b      	uxthmi	r3, r3
 8002c34:	e7ef      	b.n	8002c16 <_printf_i+0x14a>
 8002c36:	4665      	mov	r5, ip
 8002c38:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c3c:	fb02 3311 	mls	r3, r2, r1, r3
 8002c40:	5cc3      	ldrb	r3, [r0, r3]
 8002c42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c46:	460b      	mov	r3, r1
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d1f5      	bne.n	8002c38 <_printf_i+0x16c>
 8002c4c:	e7b9      	b.n	8002bc2 <_printf_i+0xf6>
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	6825      	ldr	r5, [r4, #0]
 8002c52:	6961      	ldr	r1, [r4, #20]
 8002c54:	1d18      	adds	r0, r3, #4
 8002c56:	6010      	str	r0, [r2, #0]
 8002c58:	0628      	lsls	r0, r5, #24
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	d501      	bpl.n	8002c62 <_printf_i+0x196>
 8002c5e:	6019      	str	r1, [r3, #0]
 8002c60:	e002      	b.n	8002c68 <_printf_i+0x19c>
 8002c62:	066a      	lsls	r2, r5, #25
 8002c64:	d5fb      	bpl.n	8002c5e <_printf_i+0x192>
 8002c66:	8019      	strh	r1, [r3, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	4665      	mov	r5, ip
 8002c6e:	e7b9      	b.n	8002be4 <_printf_i+0x118>
 8002c70:	6813      	ldr	r3, [r2, #0]
 8002c72:	1d19      	adds	r1, r3, #4
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	681d      	ldr	r5, [r3, #0]
 8002c78:	6862      	ldr	r2, [r4, #4]
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f7fd faaf 	bl	80001e0 <memchr>
 8002c82:	b108      	cbz	r0, 8002c88 <_printf_i+0x1bc>
 8002c84:	1b40      	subs	r0, r0, r5
 8002c86:	6060      	str	r0, [r4, #4]
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	6123      	str	r3, [r4, #16]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c92:	e7a7      	b.n	8002be4 <_printf_i+0x118>
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	462a      	mov	r2, r5
 8002c98:	4639      	mov	r1, r7
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	47c0      	blx	r8
 8002c9e:	3001      	adds	r0, #1
 8002ca0:	d0aa      	beq.n	8002bf8 <_printf_i+0x12c>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	079b      	lsls	r3, r3, #30
 8002ca6:	d413      	bmi.n	8002cd0 <_printf_i+0x204>
 8002ca8:	68e0      	ldr	r0, [r4, #12]
 8002caa:	9b03      	ldr	r3, [sp, #12]
 8002cac:	4298      	cmp	r0, r3
 8002cae:	bfb8      	it	lt
 8002cb0:	4618      	movlt	r0, r3
 8002cb2:	e7a3      	b.n	8002bfc <_printf_i+0x130>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	464a      	mov	r2, r9
 8002cb8:	4639      	mov	r1, r7
 8002cba:	4630      	mov	r0, r6
 8002cbc:	47c0      	blx	r8
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d09a      	beq.n	8002bf8 <_printf_i+0x12c>
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	68e3      	ldr	r3, [r4, #12]
 8002cc6:	9a03      	ldr	r2, [sp, #12]
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	42ab      	cmp	r3, r5
 8002ccc:	dcf2      	bgt.n	8002cb4 <_printf_i+0x1e8>
 8002cce:	e7eb      	b.n	8002ca8 <_printf_i+0x1dc>
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	f104 0919 	add.w	r9, r4, #25
 8002cd6:	e7f5      	b.n	8002cc4 <_printf_i+0x1f8>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ac      	bne.n	8002c36 <_printf_i+0x16a>
 8002cdc:	7803      	ldrb	r3, [r0, #0]
 8002cde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ce2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce6:	e76c      	b.n	8002bc2 <_printf_i+0xf6>
 8002ce8:	08002f51 	.word	0x08002f51
 8002cec:	08002f62 	.word	0x08002f62

08002cf0 <_sbrk_r>:
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4c06      	ldr	r4, [pc, #24]	; (8002d0c <_sbrk_r+0x1c>)
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	f7fd fc64 	bl	80005c8 <_sbrk>
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	d102      	bne.n	8002d0a <_sbrk_r+0x1a>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	b103      	cbz	r3, 8002d0a <_sbrk_r+0x1a>
 8002d08:	602b      	str	r3, [r5, #0]
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
 8002d0c:	200000a0 	.word	0x200000a0

08002d10 <__sread>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	460c      	mov	r4, r1
 8002d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d18:	f000 f896 	bl	8002e48 <_read_r>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	bfab      	itete	ge
 8002d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d22:	89a3      	ldrhlt	r3, [r4, #12]
 8002d24:	181b      	addge	r3, r3, r0
 8002d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d2a:	bfac      	ite	ge
 8002d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d2e:	81a3      	strhlt	r3, [r4, #12]
 8002d30:	bd10      	pop	{r4, pc}

08002d32 <__swrite>:
 8002d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d36:	461f      	mov	r7, r3
 8002d38:	898b      	ldrh	r3, [r1, #12]
 8002d3a:	05db      	lsls	r3, r3, #23
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	460c      	mov	r4, r1
 8002d40:	4616      	mov	r6, r2
 8002d42:	d505      	bpl.n	8002d50 <__swrite+0x1e>
 8002d44:	2302      	movs	r3, #2
 8002d46:	2200      	movs	r2, #0
 8002d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d4c:	f000 f868 	bl	8002e20 <_lseek_r>
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d5a:	81a3      	strh	r3, [r4, #12]
 8002d5c:	4632      	mov	r2, r6
 8002d5e:	463b      	mov	r3, r7
 8002d60:	4628      	mov	r0, r5
 8002d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d66:	f000 b817 	b.w	8002d98 <_write_r>

08002d6a <__sseek>:
 8002d6a:	b510      	push	{r4, lr}
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d72:	f000 f855 	bl	8002e20 <_lseek_r>
 8002d76:	1c43      	adds	r3, r0, #1
 8002d78:	89a3      	ldrh	r3, [r4, #12]
 8002d7a:	bf15      	itete	ne
 8002d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d86:	81a3      	strheq	r3, [r4, #12]
 8002d88:	bf18      	it	ne
 8002d8a:	81a3      	strhne	r3, [r4, #12]
 8002d8c:	bd10      	pop	{r4, pc}

08002d8e <__sclose>:
 8002d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d92:	f000 b813 	b.w	8002dbc <_close_r>
	...

08002d98 <_write_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4c07      	ldr	r4, [pc, #28]	; (8002db8 <_write_r+0x20>)
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	4608      	mov	r0, r1
 8002da0:	4611      	mov	r1, r2
 8002da2:	2200      	movs	r2, #0
 8002da4:	6022      	str	r2, [r4, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7fd fa91 	bl	80002ce <_write>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_write_r+0x1e>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_write_r+0x1e>
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	200000a0 	.word	0x200000a0

08002dbc <_close_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4c06      	ldr	r4, [pc, #24]	; (8002dd8 <_close_r+0x1c>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4605      	mov	r5, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	6023      	str	r3, [r4, #0]
 8002dc8:	f7fd fbc9 	bl	800055e <_close>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d102      	bne.n	8002dd6 <_close_r+0x1a>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	b103      	cbz	r3, 8002dd6 <_close_r+0x1a>
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	200000a0 	.word	0x200000a0

08002ddc <_fstat_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	4c07      	ldr	r4, [pc, #28]	; (8002dfc <_fstat_r+0x20>)
 8002de0:	2300      	movs	r3, #0
 8002de2:	4605      	mov	r5, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	f7fd fbc4 	bl	8000576 <_fstat>
 8002dee:	1c43      	adds	r3, r0, #1
 8002df0:	d102      	bne.n	8002df8 <_fstat_r+0x1c>
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	b103      	cbz	r3, 8002df8 <_fstat_r+0x1c>
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	bd38      	pop	{r3, r4, r5, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200000a0 	.word	0x200000a0

08002e00 <_isatty_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	4c06      	ldr	r4, [pc, #24]	; (8002e1c <_isatty_r+0x1c>)
 8002e04:	2300      	movs	r3, #0
 8002e06:	4605      	mov	r5, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	f7fd fbc3 	bl	8000596 <_isatty>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_isatty_r+0x1a>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_isatty_r+0x1a>
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	200000a0 	.word	0x200000a0

08002e20 <_lseek_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4c07      	ldr	r4, [pc, #28]	; (8002e40 <_lseek_r+0x20>)
 8002e24:	4605      	mov	r5, r0
 8002e26:	4608      	mov	r0, r1
 8002e28:	4611      	mov	r1, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	6022      	str	r2, [r4, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f7fd fbbc 	bl	80005ac <_lseek>
 8002e34:	1c43      	adds	r3, r0, #1
 8002e36:	d102      	bne.n	8002e3e <_lseek_r+0x1e>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	b103      	cbz	r3, 8002e3e <_lseek_r+0x1e>
 8002e3c:	602b      	str	r3, [r5, #0]
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	200000a0 	.word	0x200000a0

08002e44 <__malloc_lock>:
 8002e44:	4770      	bx	lr

08002e46 <__malloc_unlock>:
 8002e46:	4770      	bx	lr

08002e48 <_read_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4c07      	ldr	r4, [pc, #28]	; (8002e68 <_read_r+0x20>)
 8002e4c:	4605      	mov	r5, r0
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4611      	mov	r1, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	6022      	str	r2, [r4, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fd fb64 	bl	8000524 <_read>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_read_r+0x1e>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_read_r+0x1e>
 8002e64:	602b      	str	r3, [r5, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	200000a0 	.word	0x200000a0

08002e6c <_init>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr

08002e78 <_fini>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr
